import v4 from 'uuid/v4';

export default {
  name: 'ui',
  
  getReducer: () => {
    const initialData = {
      northConfig:{
        height: window.innerHeight
      },
      southConfig:{
        height: 0,
        children: []
      },
      primaryPanelConfig:{
        openedBy: null,
        width: 420,
        children: [],
        options: null
      },
      secondaryPanelConfig:{
        open: false,
        width: 300,
        children: [],
        options: null
      },
      modalConfig:{
        children: [],
        options: null,
        openedBy: null
      },
      basicToolbarConfig:{
        activeTool: null
      },
      theme: 'bg-blue-chambray',
      shouldUpdateWindowSize: false
    }

    return (state = initialData, { type, payload }) => {

      if(type === 'WINDOW_RESIZE'){
        return Object.assign({}, state, { 
          shouldUpdateWindowSize: true 
        });
      }

      if(type.indexOf('UI_UPDATE_WINDOW_SIZE_') !== -1){
        return Object.assign({}, state, payload);
      }

      if(type === 'UI_RESIZED_NORTH_SOUTH'){
        const northConfig = {
          height: payload.hNorth
        }
        const southConfig = {
          height: payload.hSouth,
          children: state.southConfig.children,
          options: state.southConfig.options
        }
        return Object.assign({}, state, {
          northConfig: northConfig,
          southConfig: southConfig
        })
      }

      if(type === 'UI_OPENED_SOUTH_PANEL'){
        const northConfig = {
          height: window.innerHeight / 2
        }
        const southConfig = {
          height: window.innerHeight / 2,
          children: payload.children
        }
        return Object.assign({}, state, {
          northConfig: northConfig,
          southConfig: southConfig
        })
      }

      if(type === 'UI_CLOSED_SOUTH_PANEL'){
        const northConfig = {
          height: window.innerHeight
        }
        const southConfig = {
          height: 0,
          children: []
        }
        return Object.assign({}, state, {
          northConfig: northConfig,
          southConfig: southConfig
        })
      }

      if(type === 'UI_CLOSED_SOUTH_TAB'){
        const southConfig = {
          children: payload.children
        }
        return Object.assign({}, state, {
          southConfig: southConfig
        })
      }

      if(type === 'UI_OPENED_MODAL_WINDOW'){
        const modalConfig = {
          children: payload.children,
          options: payload.options,
          openedBy: payload.openedBy
        }
        return Object.assign({}, state, {
          modalConfig: modalConfig
        })
      }

      if(type === 'UI_CLOSED_MODAL_WINDOW'){
        const modalConfig = {
          children: [],
          options: null,
          openedBy: null
        }
        return Object.assign({}, state, {
          modalConfig: modalConfig
        })
      }

      if(type === 'UI_OPENED_PRIMARY_PANEL'){
        const primaryPanelConfig = {
          openedBy: payload.openedBy,
          width: state.primaryPanelConfig.width,
          children: payload.children,
          options: payload.options
        }
        return Object.assign({}, state, {
          primaryPanelConfig: primaryPanelConfig
        })
      }

      if(type === 'UI_CLOSED_PRIMARY_PANEL'){
        const primaryPanelConfig = {
          openedBy: null,
          width: state.primaryPanelConfig.width,
          left: state.primaryPanelConfig.left,
          children: [],
          options: null
        }
        return Object.assign({}, state, {
          primaryPanelConfig: primaryPanelConfig
        })
      }

      if(type === 'UI_RESIZED_PRIMARY_PANEL'){
        const primaryPanelConfig = {
          open: state.primaryPanelConfig.open,
          width: payload.width,
          left: state.primaryPanelConfig.left,
          children: state.primaryPanelConfig.children,
          options: state.primaryPanelConfig.options,
          openedBy: state.primaryPanelConfig.openedBy
        }
        const secondaryPanelConfig = {
          open: state.secondaryPanelConfig.open,
          width: state.secondaryPanelConfig.width,
          left: payload.width,
          children: state.secondaryPanelConfig.children,
          options: state.secondaryPanelConfig.options,
          openedBy: state.secondaryPanelConfig.openedBy
        }
        return Object.assign({}, state, {
          primaryPanelConfig: primaryPanelConfig,
          secondaryPanelConfig: secondaryPanelConfig
        })
      }

      if(type === 'UI_ACTIVATE_BASIC_TOOL'){
        const basicToolbarConfig = {
          activeTool: payload
        }
        return Object.assign({}, state, {
          basicToolbarConfig: basicToolbarConfig
        })
      }

      if(type === 'UI_DEACTIVATE_BASIC_TOOL'){
        const basicToolbarConfig = {
          activeTool: null
        }
        return Object.assign({}, state, {
          basicToolbarConfig: basicToolbarConfig
        })
      }

      if(type === 'UI_THEME_CHANGED'){
        return Object.assign({}, state, {
          theme: payload
        })
      }

      return state;
    }
  },

  // ACTION CREATORS
  doUiUpdateWindowSize: () => ({ dispatch, store }) => {
    dispatch({ type: 'UI_UPDATE_WINDOW_SIZE_START', payload: { shouldUpdateWindowSize: false }});
    const h = store.selectViewportHeight();
    const northConfig = store.selectNorthConfig();
    const southConfig = store.selectSouthConfig();
    const northPortion = northConfig.height / (northConfig.height + southConfig.height);
    const southPortion = southConfig.height / (northConfig.height + southConfig.height);
    const newPayload = {
      northConfig: Object.assign({}, northConfig, { height: h * northPortion }),
      southConfig: Object.assign({}, southConfig, { height: h * southPortion })
    }
    dispatch({ type: 'UI_UPDATE_WINDOW_SIZE_COMPLETE', payload: newPayload});
    store.doMapUpdateSize();
  },

  doMapUpdateSize: () => ({ dispatch, store }) => {
    const map = store.selectMap();
    window.setTimeout(() => { map.updateSize(); }, 100);
  },

  doSouthRegionOpen: ({ component, options, openedBy, displayName }) => ({ dispatch, store }) => {
    const existingChildren = store.selectSouthRegionChildren();
    const uid = v4();
    dispatch({type:'UI_OPENED_SOUTH_PANEL', payload:{ 
      children: existingChildren.concat([{ component, options, openedBy, displayName, uid }])
    }});
    store.doMapUpdateSize();
  },

  doCloseSouthTab: (child) => ({ dispatch, store }) => {
    const children = store.selectSouthRegionChildren().slice();
    const idx = children.indexOf(child);
    children.splice(idx, 1);
    dispatch({type:'UI_CLOSED_SOUTH_TAB', payload: { children: children }});
    if(children.length === 0) return store.doCloseSouthRegion();
  },

  doCloseSouthRegion: () => ({ dispatch, store }) => {
    dispatch({type:'UI_CLOSED_SOUTH_PANEL'});
    store.doMapUpdateSize();
  },

  doModalOpen: ({ children, options, openedBy }) => ({ dispatch }) => {
    dispatch({type:'UI_OPENED_MODAL_WINDOW', payload: {children, options, openedBy }});
  },

  doModalClose: () => ({ dispatch }) => {
    dispatch({type:'UI_CLOSED_MODAL_WINDOW'});
  },

  doPrimaryPanelOpen: ({ children, options, openedBy }) => ({ dispatch }) => {
    dispatch({type:'UI_OPENED_PRIMARY_PANEL', payload:{ children, options, openedBy }});
  },

  doPrimaryPanelClose: () => ({ dispatch }) => {
    dispatch({type:'UI_CLOSED_PRIMARY_PANEL'});
  },

  doOpenSecondaryPanel: ({ children, options, openedBy }) => ({ dispatch }) => {
    dispatch({type:'UI_OPENED_SECONDARY_PANEL', payload:{ children, options, openedBy }});
  },

  doCloseSecondaryPanel: () => ({ dispatch }) => {
    dispatch({type:'UI_CLOSED_SECONDARY_PANEL'});
  },

  doSetTheme: (newTheme) => ({ dispatch }) => {
    dispatch({type:'UI_THEME_CHANGED', payload: newTheme});
  },

  doResizeSouthRegion: ({ hNorth, hSouth }) => ({ dispatch, store }) => {
    dispatch({type:'UI_RESIZED_NORTH_SOUTH', payload:{ hNorth, hSouth }});
    store.doMapUpdateSize()
  },

  doPrimaryPanelResize: ({ width }) => ({ dispatch }) => {
    dispatch({type:'UI_RESIZED_PRIMARY_PANEL', payload:{ width }});
  },

  doBasicToolbarActivate: ({ activeTool }) => ({ dispatch }) => {
    dispatch({type:'UI_ACTIVATE_BASIC_TOOL', payload: activeTool });
  },

  doBasicToolbarDeactivate: () => ({ dispatch }) => {
    dispatch({type:'UI_DEACTIVATE_BASIC_TOOL'});
  },

  // SELECTORS
  selectNorthConfig: (state) => {
    return state.ui.northConfig;
  },

  selectSouthConfig: (state) => {
    return state.ui.southConfig;
  },

  selectNorthHeight: (state) => {
    return state.ui.northConfig.height;
  },

  selectSouthHeight: (state) => {
    return state.ui.southConfig.height;
  },

  selectSouthRegionChildren: (state) => {
    return state.ui.southConfig.children;
  },

  selectModalChildren: (state) => {
    return state.ui.modalConfig.children;
  },

  selectModalOptions: (state) => {
    return state.ui.modalConfig.options;
  },

  selectPrimaryPanelOpenedBy: (state) => {
    return state.ui.primaryPanelConfig.openedBy;
  },

  selectPrimaryPanelChildren: (state) => {
    return state.ui.primaryPanelConfig.children;
  },

  selectPrimaryPanelOptions: (state) => {
    return state.ui.primaryPanelConfig.options;
  },

  selectPrimaryPanelWidth: (state) => {
    return state.ui.primaryPanelConfig.width;
  },

  selectBasicToolbarActiveTool: (state) => {
    return state.ui.basicToolbarConfig.activeTool;
  },

  selectTheme: (state) => {
    return state.ui.theme;
  },

  reactShouldUpdateWindowSize: (state) => {
    if(state.ui.shouldUpdateWindowSize) return { actionCreator: 'doUiUpdateWindowSize' };
  }
}
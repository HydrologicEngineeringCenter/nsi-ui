import xhr from 'xhr';
import { createSelector } from 'redux-bundler';

const getTokenPart = function(token, part){
  const splitToken = token.split('.');
  return splitToken[part];
}

export default {
  name: 'auth',

  getReducer(){
    const initialData = {
      shouldCheckExpired: true,
      token: '',
      err: null
    }

    return (state = initialData, {type, payload}) => {

      switch(type){
        case 'AUTH_LOGGED_IN':
        case 'AUTH_LOGGED_ERROR':
        case 'AUTH_CHECK_EXPIRED':
          return Object.assign({}, state, payload);
        case 'AUTH_LOGGED_OUT':
          return Object.assign({}, state, {
            token: '',
            err: null
          });
        default: 
          return state;
      }
    }
  },

  doLogin: () => ({dispatch, store}) => {
    const root = store.selectApiRoot();
    store.doSetCursor('wait');
    let notification;
    dispatch({type:'AUTH_LOGGING_IN'});
    xhr.get({
      url: `${root}/auth/login`
    }, (err, res, body) => {
      store.doSetCursor();
      if(res.statusCode === 404){
        notification = {
          title: "Error Logging In",
          message: `It looks like you don't have a CorpsMap account, click the button below to open the CorpsMap home page and create an account.`,
          level: "info",
          position: "tr",
          autoDismiss: 0,
          action: {
            label: "Create Account",
            callback: function() {
              window.open(
                `${root}/corpsmap/home`,
                "_blank"
              );
            }
          }
        }
        dispatch({type:'AUTH_USER_DOES_NOT_EXIST', payload: { notification: notification }})
      }else if(res.statusCode === 200){
        notification = {
          title: 'Authentication Notificiation',
          message: 'Successfully Logged In',
          level: 'success'
        }
        dispatch({type:'AUTH_LOGGED_IN', payload: { token: JSON.parse(body), notification: notification }});
      }else{
        notification = {
          title: 'Authentication Notificiation',
          message: 'Error Logging In',
          level: 'error'
        }
        dispatch({type:'AUTH_LOGIN_ERROR', payload: { err: err , notification: notification }})
      }
    })
  },

  doLogout: () => ({dispatch, store}) => {
    dispatch({type:'AUTH_LOGGED_OUT'});
  },

  doAuthCheckExpired: () => ({ dispatch, store }) => {
    dispatch({ type: 'AUTH_CHECK_EXPIRED', payload: { shouldCheckExpired: false }});
    const isExpired = store.selectIsTokenExpired();
    if(isExpired) store.doLogout();
  },

  selectIsLoggedIn: (state) => {
    return !!state.auth.token;
  },

  selectTokenRaw: (state) => {
    return state.auth.token;
  },

  selectIsTokenExpired: createSelector(
    'selectIsLoggedIn',
    'selectTokenPayload',
    (isLoggedIn, payload) => {
      if(!isLoggedIn) return false;
      return payload.exp < Math.floor(Date.now()/1000);
    }
  ),

  selectTokenHeader: createSelector(
    'selectTokenRaw',
    (token) => {
      if(!token) return {};
      return JSON.parse(window.atob(getTokenPart(token, 0)));
    }
  ),

  selectTokenPayload: createSelector(
    'selectTokenRaw',
    (token) => {
      if(!token) return {};
      return JSON.parse(window.atob(getTokenPart(token, 1)));
    }
  ),

  reactAuthShouldCheckExpired: (state) => {
    if(state.auth.shouldCheckExpired) return { actionCreator: 'doAuthCheckExpired' };
  }, 

  persistActions: ['AUTH_LOGGED_IN', 'AUTH_LOGGED_OUT']
}
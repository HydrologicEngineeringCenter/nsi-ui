import { get, addProjection } from "ol/proj";
import Projection from "ol/proj/Projection";
import proj4 from "proj4";
import _ from "lodash";

export default {
  name: "proj",

  getReducer() {
    const initialData = {
      epsgio: false,
      displayProjection: "EPSG:4326",
      displayProjectionName: "WGS 84 - WGS84 - World Geodetic System 1984",
      "EPSG:4326": {
        epsg: "EPSG:4326",
        name: "WGS 84 - WGS84 - World Geodetic System 1984",
        proj: get("EPSG:4326"),
      },
      "EPSG:3857": {
        epsg: "EPSG:3857",
        name: "WGS 84 / Pseudo-Mercator - Spherical Mercator",
        proj: get("EPSG:3857"),
      },
    };

    return (state = initialData, { type, payload }) => {
      if (type === "PROJECTION_LOAD_SUCCESS") {
        return Object.assign({}, state, {
          [payload.epsg]: payload,
        });
      }

      if (type === "PROJECTION_REMOVED") {
        return Object.assign({}, payload);
      }

      if (type === "PROJECTION_SELECTED") {
        return Object.assign({}, state, payload);
      }

      if (type === "PROJECTION_PING_RESULT") {
        return Object.assign({}, state, {
          epsgio: payload.epsgio,
        });
      }

      return state;
    };
  },

  // action creators

  doLoadProjDef: (epsg) => ({ dispatch, store, anonGet }) => {
    dispatch({ type: "PROJECTION_LOAD_START" });
    const matcher = /PROJCS..(.*)..GEOGCS/g;
    let newcode = epsg;
    if (epsg.indexOf(":") !== -1) newcode = newcode.split(":")[1];
    anonGet(`https://epsg.io/${newcode}.proj4`, (err, response, projBody) => {
      if (projBody) {
        anonGet(`https://epsg.io/${newcode}.wkt`, (err, response, nameBody) => {
          if (nameBody) {
            const name = matcher.exec(nameBody)[1];

            proj4.defs(epsg, projBody);
            addProjection(new Projection({ code: epsg }));

            dispatch({
              type: "PROJECTION_LOAD_SUCCESS",
              payload: {
                epsg: epsg,
                name: name,
                def: get(epsg),
              },
            });
          }
        });
      } else {
        dispatch({ type: "PROJECTION_LOAD_ERROR", payload: response });
      }
    });
  },

  doProjectionPingEPSGIO: () => ({ dispatch, anonGet }) => {
    const testUrl = "https://epsg.io/26916.wkt";
    anonGet(testUrl, (err, response, body) => {
      if (body) {
        dispatch({
          type: "PROJECTION_PING_RESULT",
          payload: {
            epsgio: true,
          },
        });
      }
    });
  },

  doRemoveProjection: (epsg) => ({ dispatch, store }) => {
    const state = Object.assign({}, store.selectProjectionStateRaw());
    delete state[epsg];
    dispatch({ type: "PROJECTION_REMOVED", payload: state });
  },

  doSelectProjection: (epsg, name) => ({ dispatch }) => {
    dispatch({
      type: "PROJECTION_SELECTED",
      payload: { displayProjection: epsg, displayProjectionName: name },
    });
  },

  // selectors
  selectGeoProjection: (state) => {
    return state.proj["EPSG:4326"].proj;
  },

  selectMapProjection: (state) => {
    return state.proj["EPSG:3857"].proj;
  },

  selectProjectionStateRaw: (state) => {
    return state.proj;
  },

  selectProjectionList: (state) => {
    return _.values(state.proj).filter((val) => {
      return typeof val === "object";
    });
  },

  selectDisplayProjection: (state) => {
    return state.proj.displayProjection;
  },

  selectDisplayProjectionName: (state) => {
    return state.proj.displayProjectionName;
  },

  selectProjectionCanUseEPSGIO: (state) => {
    return state.proj.epsgio;
  },

  init(store) {
    store.doProjectionPingEPSGIO();
  },
};

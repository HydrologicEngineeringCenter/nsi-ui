export default {
  name: 'interactions',

  getReducer(){
    const initialData = {
      active: []
    }

    return (state = initialData, { type, payload }) => {

      if(type === 'INTERACTION_SET'){
        return Object.assign({}, state, {
          active: payload
        })
      }

      if(type === 'INTERACTION_UNSET'){
        return Object.assign({}, state, {
          active: []
        })
      }

      return state;
    }
  },

  doSetInteraction: (interaction) => ({ dispatch, store }) => {
    const activeInteractions = store.selectActiveInteractions();
    const map = store.selectMap();
    map.addInteraction(interaction);
    const interactions = [interaction].concat(activeInteractions);
    dispatch({type:'INTERACTION_SET', payload: interactions});
  },

  doUnsetInteractions: () => ({ dispatch, store }) => {
    const activeInteractions = store.selectActiveInteractions();
    const map = store.selectMap();
    if(activeInteractions.length){
      activeInteractions.forEach((i) => {
        i.setActive(false);
        map.removeInteraction(i);
      })
    }
    dispatch({type:'INTERACTION_UNSET'});
  },

  selectActiveInteractions: (state) => {
    return state.interactions.active;
  }
}
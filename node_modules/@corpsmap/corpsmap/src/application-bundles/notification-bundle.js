import v4 from 'uuid/v4';

export default {
  name: 'notifications',

  getReducer(){
    const initialData = {}

    return (state = initialData, { type, payload }) => {
      if(payload && payload.notification){
        const uid = v4();
        payload.notification.uid = uid;
        return Object.assign({}, state, {
          [uid]: payload.notification
        })
      }

      switch(type){
        case 'NOTIFICATIONS_FIRED':
        case 'NOTIFICATIONS_DISMISSED':
          return Object.assign({}, state, payload);
        default:
          return state;
      }
    }
  },

  doNotificationsFire: (options) => ({ dispatch, store }) => {
    const uid = v4();
    options.uid = uid;
    dispatch({
      type: 'NOTIFICATIONS_FIRED',
      payload: {
        [uid]: options
      }
    })
  },

  doNotificationsDismiss: (uid) => ({ dispatch, store }) => {
    const state = store.selectNotifications();
    delete state[uid];
    dispatch({
      type: 'NOTIFICATIONS_DISMISSED',
      payload: state
    })
  },

  selectNotifications: (state) => {
    return state.notifications;
  }
}
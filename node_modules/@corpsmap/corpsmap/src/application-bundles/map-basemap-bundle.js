import { getLayer, getSource } from "../openlayers-utils/layer-utilities";

export default {
	name: "basemaps",

	getReducer() {
		const initialData = {
			shouldCheckDefault: false,
			activeBasemap: 0,
			idx: 0
		};

		return (state = initialData, { type, payload }) => {
			switch (type) {
				case "BASEMAP_CHANGED":
				case "BASEMAP_CHECKING_DEFAULT":
					return Object.assign({}, state, payload);
				case "MAP_INITIALIZED":
					return Object.assign({}, state, {
						shouldCheckDefault: true
					});
				default:
					return state;
			}
		};
	},

	doBasemapsCheckDefault: () => ({ dispatch, store }) => {
		dispatch({
			type: "BASEMAP_CHECKING_DEFAULT",
			payload: { shouldCheckDefault: false }
		});
		const config = store.selectDefaultConfig();
		if (config.map.hasOwnProperty("basemap"))
			store.doChangeBasemap(config.map.basemap);
	},

	doChangeBasemap: basemapIndex => ({ dispatch, store }) => {
		let activeBasemap = store.selectActiveBasemap();
		const basemapList = store.selectBasemapList();
		const map = store.selectMap();
		const basemapConfig = basemapList[basemapIndex];
		if (!basemapConfig.serviceType) basemapConfig.serviceType = "XYZ";
		const src = getSource(basemapConfig);
		if (!activeBasemap) {
			activeBasemap = getLayer({ serviceType: "XYZ", visible: true });
		}
		map.removeLayer(activeBasemap);
		activeBasemap.setSource(src);
		map.getLayers().insertAt(0, activeBasemap);
		dispatch({
			type: "BASEMAP_CHANGED",
			payload: { activeBasemap: activeBasemap, idx: basemapIndex }
		});
	},

	selectActiveBasemap: state => {
		return state.basemaps.activeBasemap;
	},

	selectActiveBasemapIdx: state => {
		return state.basemaps.idx;
	},

	reactBasemapsShouldCheckDefault: state => {
		if (state.basemaps.shouldCheckDefault)
			return { actionCreator: "doBasemapsCheckDefault" };
	}
};

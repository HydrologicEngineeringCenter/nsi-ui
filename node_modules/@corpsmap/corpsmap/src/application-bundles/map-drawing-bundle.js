import createInteraction from '../openlayers-utils/interaction-creator';

export default {
  name: 'draw',

  getReducer(){
    const initialData = {
      interactions: [],
      source: null,
      owner: null,
      feature: null,
      geom: null
    }

    return (state = initialData, { type, payload}) => {

      if(type === 'DRAW_INIT'){
        return Object.assign({}, state, payload)
      }

      if(type === 'DRAW_START'){
        return Object.assign({}, state, payload)
      }

      if(type === 'DRAW_UPDATE_GEOM'){
        return Object.assign({}, state, payload)
      }

      if(type === 'DRAW_STOP'){
        return Object.assign({}, state, payload)
      }

      if(type === 'DRAW_SHUTDOWN'){
        return Object.assign({}, state, {
          interactions: [],
          source: null,
          owner: null,
          feature: null,
          geom: null
        })
      }

      return state;
    }
  },

  doInitializeDrawing: (source, geometryType, owner) => ({dispatch, store}) => {
    const draw = createInteraction({
      interaction:'draw', 
      source: source, 
      type: geometryType,
      on:[{
        event:'drawstart', 
        listener: store.doStartDrawing
      },{
        event:'drawend',
        listener: store.doStopDrawing
      }]
    });
    store.doSetInteraction(draw);

    const snap = createInteraction({
      interaction: 'snap',
      source: source
    })
    store.doSetInteraction(snap);
    
    const modify = createInteraction({
      interaction: 'modify',
      source: source
    })
    store.doSetInteraction(modify);

    const interactions = [draw, snap, modify];

    dispatch({ type:'DRAW_INIT', payload: { source, owner, interactions } })
  },

  doStartDrawing: (e) => ({ dispatch, store }) => {
    const owner = store.selectDrawOwner();
    const geom = e.feature.getGeometry();
    if(geom) geom.on('change', store.doUpdateDrawing);
    dispatch({type:'DRAW_START', payload: { feature: e.feature, geom: geom, owner: owner }});
  },

  doUpdateDrawing: (e) => ({ dispatch, store }) => {
    const owner = store.selectDrawOwner();
    const feature = store.selectDrawFeature();
    dispatch({type:'DRAW_UPDATE_GEOM', payload: { geom: feature.getGeometry(), owner: owner }});
  },

  doStopDrawing: () => ({ dispatch, store }) => {
    const owner = store.selectDrawOwner();
    dispatch({type:'DRAW_STOP', payload:{ owner }})
  },

  doDrawShutDown: () => ({ dispatch, store }) => {
    const owner = store.selectDrawOwner();
    const geom = store.selectDrawGeom();
    if(geom) geom.un('change', store.doUpdateDrawing);
    store.doUnsetInteractions();
    dispatch({type:'DRAW_SHUTDOWN', payload: { owner }})
  },

  selectDrawFeature: (state) => {
    return state.draw.feature;
  },

  selectDrawGeom: (state) => {
    return state.draw.geom;
  },

  selectDrawOwner: (state) => {
    return state.draw.owner;
  },

  selectDrawSource: (state) => {
    return state.draw.source;
  }
}
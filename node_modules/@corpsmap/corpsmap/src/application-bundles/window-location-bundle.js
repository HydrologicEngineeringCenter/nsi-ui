function QueryStringToJSON(search) {            
  const pairs = search.slice(1).split('&');
  const result = {};
  pairs.forEach(function(pair) {
      pair = pair.split('=');
      result[pair[0]] = decodeURIComponent(pair[1] || '');
  });
  return JSON.parse(JSON.stringify(result));
}

export default {
  name: 'windowLocation',

  getReducer(){
    const initialData = {
      shouldParse: true,
      host: null,
      href: null,
      origin: null,
      pathname: null,
      search: null,
      params: null
    }

    return (state = initialData, { type, payload }) => {
      switch(type){
        case 'WINDOW_LOCATION_PARSE_START':
        case 'WINDOW_LOCATION_PARSED':
          return Object.assign({}, state, payload);
        default:
          return state;
      }
    }
  },

  doWindowLocationParse: () => ({ dispatch, store }) => {
    dispatch({
      type: 'WINDOW_LOCATION_PARSE_START',
      payload:{
        shouldParse: false
      }
    })

    const location = window.location;
    const host = location.host;
    const href = location.href;
    const origin = location.origin;
    const pathname = location.pathname;
    const search = location.search;
    let params = QueryStringToJSON(search);

    dispatch({ type: 'WINDOW_LOCATION_PARSED', payload: {
      host: host,
      href: href,
      origin: origin,
      pathname: pathname,
      search: search,
      params: params
    }})
  },

  selectWindowLocationHost: (state) => {
    return state.windowLocation.host;
  },

  selectWindowLocationHref: (state) => {
    return state.windowLocation.Href;
  },

  selectWindowLocationOrigin: (state) => {
    return state.windowLocation.origin;
  },

  selectWindowLocationPathname: (state) => {
    return state.windowLocation.pathname;
  },

  selectWindowLocationSearch: (state) => {
    return state.windowLocation.search;
  },

  selectWindowLocationParams: (state) => {
    return state.windowLocation.params;
  },

  reactWindowShouldParseLocation: (state) => {
    if(state.windowLocation.shouldParse) return { actionCreator: 'doWindowLocationParse' };
  }

}
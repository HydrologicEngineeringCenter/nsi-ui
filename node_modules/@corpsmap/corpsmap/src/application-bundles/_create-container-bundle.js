export default (opts) => {
 
  const defaults = {
    name: 'container',
    children: null,
    options: null,
    openedBy: null,
    addons: {},
    additionalActions: [],
    additionalState: {}
  }

  const config = Object.assign({}, defaults, opts);

  const uCaseName = config.name.charAt(0).toUpperCase() + config.name.slice(1);
  const baseType = config.name.toUpperCase();

  // actions
  const actions = {
    OPENED: `${baseType}_OPENED`,
    CLOSED: `${baseType}_CLOSED`
  }

  // action creators
  const doOpen = `do${uCaseName}Open`;
  const doClose = `do${uCaseName}Close`;

  // selectors
  const selectChildren = `select${uCaseName}Children`;
  const selectOptions = `select${uCaseName}Options`;
  const selectOpenedBy = `select${uCaseName}OpenedBy`;

  // reactors

  const result = Object.assign(
    {}, 
    {
      name: config.name,

      getReducer: () => {
        const initialData = Object.assign({ 
          children: config.children,
          options: config.options,
          openedBy: config.openedBy
        }, config.additionalState)

        return (state = initialData, { type, payload }) => {
          // allow some monkeypatching
          if(config.additionalActions.indexOf(type) !== -1){
            return Object.assign({}, state, payload);
          }

          switch(type){
            case actions.OPENED:
            case actions.CLOSED:
              return Object.assign({}, state, payload);
            default: 
              return state;
          }
        }
      },

      [doOpen]: ({ children, options, openedBy }) => ({ dispatch }) => {
        if(!children.length) children = [children];
        dispatch({
          type: actions.OPENED,
          payload: {
            children: children,
            options: options,
            openedBy: openedBy
          }
        })
      },

      [doClose]: () => ({ dispatch }) => {
        dispatch({
          type: actions.CLOSED,
          payload: {
            children: null,
            options: null,
            openedBy: null
          }
        })
      },

      [selectChildren]: (state) => {
        return state[config.name].children;
      },

      [selectOptions]: (state) => {
        return state[config.name].options;
      },

      [selectOpenedBy]: (state) => {
        return state[config.name].openedBy;
      }
    },
    config.addons
  )

  return result;
}
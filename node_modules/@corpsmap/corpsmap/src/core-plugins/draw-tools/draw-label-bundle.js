import Select from 'ol/interaction/Select';
import { createSelector } from 'redux-bundler';

export default {
  name: 'drawLabels',

  getReducer: () => {
    const initialData = {
      active: false,
      select: null,
      shouldInitialize: false
    }

    return (state = initialData, { type, payload }) => {
      if(type.indexOf('DRAW') !== -1) console.log(type)
      switch(type){
        case 'DRAW_LABELS_INITIALIZE_START':
        case 'DRAW_LABELS_INITIALIZE_FINISH':
        case 'DRAW_LABELS_ACTIVATE':
        case 'DRAW_LABELS_DEACTIVATE':
          return Object.assign({}, state, payload);
        case 'DRAWPOINTS_INITIALIZE_FINISH':
        case 'DRAWLINES_INITIALIZE_FINISH':
        case 'DRAWPOLYGONS_INITIALIZE_FINISH':
          return Object.assign({}, state, {
            shouldInitialize: true
          })
        default:
          return state;
      }
    }
  },

  doDrawLabelsInitialize: () => ({ dispatch, store }) => {
    dispatch({
      type: 'DRAW_LABELS_INITIALIZE_START',
      payload: {
        shouldInitialize: false
      }
    })

    const layers = store.selectDrawLabelsChildLayers();
    if(!layers) return null;

    const select = new Select({
      layers: layers
    })

    select.on('select', store.doDrawLabelsHandleSelect);

    dispatch({
      type: 'DRAW_LABELS_INITIALIZE_FINISH',
      payload: {
        select: select
      }
    })
  },

  doDrawLabelsAddInteractions: () => ({ dispatch, store }) => {
    store.doSetCursor('pointer');
    const map = store.selectMap();
    const select = store.selectDrawLabelsInteraction();
    map.addInteraction(select);
    dispatch({
      type: 'DRAW_LABELS_ACTIVATE',
      payload: {
        active: true
      }
    })
  },

  doDrawLabelsRemoveInteractions: () => ({ dispatch, store }) => {
    store.doSetCursor();
    const map = store.selectMap();
    const select = store.selectDrawLabelsInteraction();
    map.removeInteraction(select);
    dispatch({
      type: 'DRAW_LABELS_DEACTIVATE',
      payload: {
        active: false
      }
    })
  },

  doDrawLabelsHandleSelect: (e) => ({ store }) => {
    const feature = e.selected[0];
    const label = feature.get('label') || '';
    const newLabel = window.prompt('Label the Draw Feature', label);
    feature.set('label', newLabel);
    const select = store.selectDrawLabelsInteraction();
    const features = select.getFeatures();
    features.clear();
  },

  selectDrawLabelsChildLayers: createSelector(
    'selectDrawPointsLayer',
    'selectDrawLinesLayer',
    'selectDrawPolygonsLayer',
    (points, lines, polygons) => {
      if(!points || !lines || !polygons) return null;
      return [points, lines, polygons];
    }
  ),

  selectDrawLabelsActive: (state) => {
    return state.drawLabels.active;
  },

  selectDrawLabelsInteraction: (state) => {
    return state.drawLabels.select;
  },

  reactDrawLabelsShouldInitialize: (state) => {
    if(state.drawLabels.shouldInitialize) return { actionCreator: 'doDrawLabelsInitialize' }
  }
}
import Select from 'ol/interaction/Select';
import Modify from 'ol/interaction/Modify';
import { createSelector } from 'redux-bundler';

export default {
  name: 'drawModify',

  getReducer: () => {
    const initialData = {
      active: false,
      select: null,
      modify: null,
      shouldInitialize: false
    }

    return (state = initialData, { type, payload }) => {
      switch(type){
        case 'DRAW_MODIFY_INITIALIZE_START':
        case 'DRAW_MODIFY_INITIALIZE_FINISH':
        case 'DRAW_MODIFY_ACTIVATE':
        case 'DRAW_MODIFY_DEACTIVATE':
          return Object.assign({}, state, payload);
        case 'DRAWPOINTS_INITIALIZE_FINISH':
        case 'DRAWLINES_INITIALIZE_FINISH':
        case 'DRAWPOLYGONS_INITIALIZE_FINISH':
          return Object.assign({}, state, {
            shouldInitialize: true
          })
        default:
          return state;
      }
    }
  },

  doDrawModifyInitialize: () => ({ dispatch, store }) => {
    dispatch({
      type: 'DRAW_MODIFY_INITIALIZE_START',
      payload: {
        shouldInitialize: false
      }
    })

    const layers = store.selectDrawModifyChildLayers();
    if(!layers) return null;

    const select = new Select({
      layers: layers
    });

    const modify = new Modify({
      features: select.getFeatures()
    })

    dispatch({
      type: 'DRAW_MODIFY_INITIALIZE_FINISH',
      payload: {
        select: select,
        modify: modify
      }
    })
  },

  doDrawModifyAddInteractions: () => ({ dispatch, store }) => {
    store.doSetCursor('pointer');
    const map = store.selectMap();
    const interactions = store.selectDrawModifyInteraction();
    interactions.forEach((interaction) => {
      map.addInteraction(interaction);
    })
    window.addEventListener('keyup', store.doDrawModifyHandleKeyUp);
    dispatch({
      type: 'DRAW_MODIFY_ACTIVATE',
      payload: {
        active: true
      }
    })
  },

  doDrawModifyRemoveInteractions: () => ({ dispatch, store }) => {
    store.doSetCursor();
    const map = store.selectMap();
    const interactions = store.selectDrawModifyInteraction();
    interactions.forEach((interaction) => {
      map.removeInteraction(interaction);
    })
    window.removeEventListener('keyup', store.doDrawModifyHandleKeyUp);
    dispatch({
      type: 'DRAW_MODIFY_DEACTIVATE',
      payload: {
        active: false
      }
    })
  },

  doDrawModifyHandleSelect: (e) => ({ store }) => {
    const feature = e.selected[0];
    const label = feature.get('label') || '';
    const newLabel = window.prompt('Label the Draw Feature', label);
    feature.set('label', newLabel);
    const select = store.selectDrawModifyInteraction();
    const features = select.getFeatures();
    features.clear();
  },

  doDrawModifyHandleKeyUp: (e) => ({ store }) => {
    const keyCode = e.keyCode;
    const select = store.selectDrawModifySelect();
    const features = select.getFeatures();
    const layers = store.selectDrawModifyChildLayers();
    if(!layers) return null;
    // check for delete or backspace
    if([8, 46].indexOf(keyCode) !== -1){
      features.forEach((f) => {
        layers.forEach((l) => {
          const src = l.getSource();
          if(src.hasFeature(f)) src.removeFeature(f);
        })
      })
      features.clear();
    }
  },

  selectDrawModifyChildLayers: createSelector(
    'selectDrawPointsLayer',
    'selectDrawLinesLayer',
    'selectDrawPolygonsLayer',
    (points, lines, polygons) => {
      if(!points || !lines || !polygons) return null;
      return [points, lines, polygons];
    }
  ),

  selectDrawModifyActive: (state) => {
    return state.drawModify.active;
  },

  selectDrawModifySelect: (state) => {
    return state.drawModify.select;
  },

  selectDrawModifyModify: (state) => {
    return state.drawModify.modify;
  },

  selectDrawModifyInteraction: createSelector(
    'selectDrawModifySelect',
    'selectDrawModifyModify',
    (select, modify) => {
      return [select, modify]
    }
  ),

  reactDrawModifyShouldInitialize: (state) => {
    if(state.drawModify.shouldInitialize) return { actionCreator: 'doDrawModifyInitialize' }
  }
}
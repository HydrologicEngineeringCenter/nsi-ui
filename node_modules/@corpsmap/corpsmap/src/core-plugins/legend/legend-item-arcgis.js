import React from 'react';
import xhr from 'xhr';
import _ from 'lodash';

class LegendItem extends React.Component {
  constructor(props){
    super(props);
    const { displayName, url, type, layerList } = props.layer;
    let src = url;

    switch(type){
      case 'ArcGIS':
        src = src + '/legend?f=pjson';
      break;
      case 'ArcGISImage':
        src = src + '/legend?bandIds=&renderingRule=&f=pjson';
      break;
      default:
        src = null;
    }

    this.state = {
      activeLayers: layerList.split(',').map(Number),
      layers: [],
      displayName: displayName,
      src: src,
      err: null
    }

    this.loadLegend = this.loadLegend.bind(this);
    this.renderError = this.renderError.bind(this);
    this.renderLayers = this.renderLayers.bind(this);
  }

  componentDidMount(){
    this.loadLegend();
  }

  loadLegend(){
    const { src, activeLayers } = this.state;
    xhr.get(src, (err, response, body) => { 
      if(err || response.statusCode !== 200){
        this.setState({err: response.statusCode + ' ' + err})
      }else{
        const data = JSON.parse(body);
        const filtered = data.layers.filter((lyr)=> {
          return activeLayers.indexOf(lyr.layerId) !== -1;
        })
        this.setState({
          layers: filtered
        })
      }
    })
  }

  renderLayers(){
    const { layers } = this.state;
    const items = layers.map((lyr, y) => {
      return lyr.legend.map((legend, i) => {
        const src = "data:" + legend.contentType + ";base64," + legend.imageData;
        return <div key={y + '-' + i}><img alt={`Example of style for ${ legend.label }`} src={ src }></img>{ legend.label }</div>
      })
    })
    return _.flatten(items);
  }

  renderError(){  
    const { err } = this.state;
    if(err) return <div>{ err }</div>
    return null;
  }

  render(){
    const { displayName } = this.state;
    return (
      <li className="cm-list-group-item">
        <div className="overflow-ellipsis" title={ displayName }><strong>{ displayName }</strong></div>
        { this.renderLayers() }
        { this.renderError() }
      </li>
    )
  }
}

export default LegendItem;
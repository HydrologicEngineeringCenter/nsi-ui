import VectorLayer from 'ol/layer/Vector';
import VectorSource from 'ol/source/Vector';
import Draw from 'ol/interaction/Draw';
import { createSelector } from 'redux-bundler';
import styles from './draw-styles';

export default (opts) => {

  const defaultOptions = {
    name: 'draw',
    type: 'Point',
    active: false,
    visible: true
  }

  const config = Object.assign({}, defaultOptions, opts);

  const uCaseName = config.name.charAt(0).toUpperCase() + config.name.slice(1);
  const baseType = config.name.toUpperCase();

  // Actions
  const actions = {
    INITIALIZE_START: `${baseType}_INITIALIZE_START`,
    INITIALIZE_FINISH: `${baseType}_INITIALIZE_FINISH`,
    SHOW: `${baseType}_SHOW`,
    HIDE: `${baseType}_HIDE`,
    ACTIVATE: `${baseType}_ACTIVATE`,
    DEACTIVATE: `${baseType}_DEACTIVATE`
  }

  // Action Creators
  const doInitialize = `do${uCaseName}Initialize`;
  const doAddLayer = `do${uCaseName}AddLayer`;
  const doRemoveLayer = `do${uCaseName}RemoveLayer`;
  const doAddInteractions = `do${uCaseName}AddInteractions`;
  const doRemoveInteractions = `do${uCaseName}RemoveInteractions`;
  const doToggleVisible = `do${uCaseName}ToggleVisible`;
  const doToggleInteractions = `do${uCaseName}ToggleInteractions`;
  
  // Selectors
  const selectLayer = `select${uCaseName}Layer`;
  const selectDrawInteraction = `select${uCaseName}DrawInteraction`;
  const selectModifyInteraction = `select${uCaseName}ModifyselectModifyInteraction`;
  const selectInteractions = `select${uCaseName}InterselectInteractions`;
  const selectActive = `select${uCaseName}Active`;
  const selectVisible = `select${uCaseName}Visible`;

  // Reactors
  const reactShouldInitialize = `react${uCaseName}ShouldInitialize`;

  return {

    name: config.name,

    getReducer(){
      const initialData = {
        active: config.active,
        visible: config.visible,
        layer: null,
        drawInteraction: null,
        shouldInitialize: true,
      }

      return (state = initialData, { type, payload}) => {
        switch(type){
          case actions.INITIALIZE_START:
          case actions.INITIALIZE_FINISH:
          case actions.SHOW:
          case actions.HIDE:
          case actions.ACTIVATE:
          case actions.DEACTIVATE:
            return Object.assign({}, state, payload);
          default:
            return state;
        }
      }
    },

    [doInitialize]: () => ({ dispatch, store }) => {
      dispatch({
        type: actions.INITIALIZE_START,
        payload: {
          shouldInitialize: false
        }
      })

      const source = new VectorSource();

      const layer = new VectorLayer({ 
        source: source,
        style: styles(config.type)          
      })

      const drawInteraction = new Draw({
        source: source,
        type: config.type
      })

      if(config.visible){
        const map = store.selectMap();
        map.addLayer(layer);
      }

      dispatch({
        type: actions.INITIALIZE_FINISH,
        payload: {
          layer: layer,
          drawInteraction: drawInteraction
        }
      })
    },

    [doAddLayer]: () => ({ dispatch, store }) => {
      const map = store.selectMap();
      const layer = store[selectLayer]();
      map.addLayer(layer);
      dispatch({
        type: actions.SHOW,
        payload: {
          visible: true
        }
      })
    },

    [doRemoveLayer]: () => ({ dispatch, store }) => {
      const map = store.selectMap();
      const layer = store[selectLayer]();
      map.removeLayer(layer);
      dispatch({
        type: actions.HIDE,
        payload: {
          visible: false
        }
      })
    },

    [doToggleVisible]: () => ({ dispatch, store }) => {
      const visible = store[selectVisible]();
      if(visible){
        store[doRemoveLayer]();
      }else{
        store[doAddLayer]();
      }
    },

    [doAddInteractions]:  () => ({ dispatch, store }) => {
      store.doSetCursor('crosshair');
      const map = store.selectMap();
      const interactions = store[selectInteractions]();
      interactions.forEach((interaction) => {
        map.addInteraction(interaction);
      })
      dispatch({
        type: actions.ACTIVATE,
        payload: {
          active: true
        }
      })
    },

    [doRemoveInteractions]: () => ({ dispatch, store }) => {
      store.doSetCursor();
      const map = store.selectMap();
      const interactions = store[selectInteractions]();
      interactions.forEach((interaction) => {
        map.removeInteraction(interaction);
      })
      dispatch({
        type: actions.DEACTIVATE,
        payload: {
          active: false
        }
      })
    },

    [doToggleInteractions]: () => ({ store }) => {
      const active = store.selectActive();
      if(active){
        store[doRemoveInteractions]();
      }else{
        store[doAddInteractions]();
      }
    },

    [selectActive]: (state) => {
      return state[config.name].active;
    },

    [selectVisible]: (state) => {
      return state[config.name].visible;
    },

    [selectLayer]: (state) => {
      return state[config.name].layer;
    },

    [selectDrawInteraction]: (state) => {
      return state[config.name].drawInteraction;
    },

    [selectInteractions]: createSelector(
      selectDrawInteraction,
      (draw) => {
        return [draw];
      }
    ),

    [reactShouldInitialize]: (state) => {
      if(state[config.name].shouldInitialize) return { actionCreator: doInitialize };
    }
  }
}
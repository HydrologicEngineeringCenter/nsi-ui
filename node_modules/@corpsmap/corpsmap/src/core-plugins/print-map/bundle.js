export default {
  name: "print",

  getReducer: () => {
    const initialData = {};

    return (state = initialData, { type, payload }) => {
      switch (type) {
        case "PRINT_ERROR":
        case "PRINT_LOADING":
          return Object.assign({}, state, payload);
        default:
          return state;
      }
    };
  },
  doPrintMap: () => ({ dispatch, store }) => {
    // check for IE
    if (window.navigator.msSaveBlob) {
      dispatch({
        type: "PRINT_ERROR",
        payload: {
          notification: {
            title: "Print Notification",
            message: "Browser not supported.",
            level: "danger",
          },
        },
      });
      store.doBasicToolbarDeactivate();
    } else {
      dispatch({
        type: "PRINT_LOADING",
        payload: {
          notification: {
            title: "Print Notification",
            message: "Loading Image..",
            level: "success",
          },
        },
      });

      const map = store.selectMap();

      map.once("rendercomplete", function () {
        let mapCanvas = document.createElement("canvas");
        const size = map.getSize();
        mapCanvas.width = size[0];
        mapCanvas.height = size[1];
        let mapContext = mapCanvas.getContext("2d");
        Array.prototype.forEach.call(
          document.querySelectorAll(".ol-layer canvas"),
          function (canvas) {
            if (canvas.width > 0) {
              const opacity = canvas.parentNode.style.opacity;
              mapContext.globalAlpha = opacity === "" ? 1 : Number(opacity);
              var transform = canvas.style.transform;
              // Get the transform parameters from the style's transform matrix
              const matrix = transform
                .match(/^matrix\(([^\(]*)\)$/)[1]
                .split(",")
                .map(Number);
              // Apply the transform to the export map context
              CanvasRenderingContext2D.prototype.setTransform.apply(
                mapContext,
                matrix
              );
              mapContext.drawImage(canvas, 0, 0);
            }
          }
        );

        let print = document.createElement("a");
        print.download = "map.png";
        print.href = mapCanvas.toDataURL();
        document.body.appendChild(print);
        print.click();
        print.remove();
      });
      map.renderSync();
      store.doBasicToolbarDeactivate();
    }
  },
};

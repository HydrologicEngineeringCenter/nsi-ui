import { transform } from "ol/proj";
import { createSelector } from "redux-bundler";

export default {
  name: "zoomHome",

  getReducer: () => {
    const initialData = {
      centerX: null,
      centerY: null,
      centerZ: null,
    };

    return (state = initialData, { type, payload }) => {
      switch (type) {
        case "ZOOM_HOME_RESET_LOC":
          return Object.assign({}, state, payload);
        default:
          return state;
      }
    };
  },

  selectZoomHomeConfig: (state) => {
    return {
      centerX: state.zoomHome.centerX,
      centerY: state.zoomHome.centerY,
      centerZ: state.zoomHome.centerZ,
    };
  },

  selectZoomHomeLoc: createSelector(
    "selectDefaultConfig",
    "selectZoomHomeConfig",
    "selectGeoProjection",
    "selectMapProjection",
    (defaultConfig, updatedConfig, geoProj, mapProj) => {
      const centerX = updatedConfig.centerX || defaultConfig.map.centerX;
      const centerY = updatedConfig.centerY || defaultConfig.map.centerY;
      const centerZ = updatedConfig.centerZ || defaultConfig.map.centerZ;
      return {
        center: transform([Number(centerX), Number(centerY)], geoProj, mapProj),
        centerZ: centerZ,
      };
    }
  ),

  doZoomHomeResetLoc: () => ({ dispatch, store }) => {
    const mapProj = store.selectMapProjection();
    const geoProj = store.selectGeoProjection();
    const map = store.selectMap();
    const view = map.getView();
    const center = view.getCenter();
    const geoCenter = transform(center, mapProj, geoProj);
    const centerZ = view.getZoom();
    dispatch({
      type: "ZOOM_HOME_RESET_LOC",
      payload: {
        centerX: geoCenter[0],
        centerY: geoCenter[1],
        centerZ: centerZ,
      },
    });
  },

  doZoomHome: () => ({ store }) => {
    const loc = store.selectZoomHomeLoc();
    store.doSetRotationNorth();
    store.doZoomToLocation(loc.center, loc.centerZ);
  },
};

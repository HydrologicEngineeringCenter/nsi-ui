import React from 'react';
import { connect } from 'redux-bundler-react';
import ReactDataGrid from 'react-data-grid';
import _ from 'lodash';

class EditorTable extends React.Component {

  constructor(props){
    super(props);

    this.state = {
      rows: [],
      source: props.editingMapLayer.getSource(),
      minHeight: 200,
      selectedIds: [],
      sortBy: 'ol_uid',
      sortDir: 0
    }

    this.rowGetter = this.rowGetter.bind(this);
    this.onRowsDeselected = this.onRowsDeselected.bind(this);
    this.onRowsSelected = this.onRowsSelected.bind(this);
    this.onRowsUpdated = this.onRowsUpdated.bind(this);
    this.setRowsFromSource = this.setRowsFromSource.bind(this);
    this.watchSource = this.watchSource.bind(this);
    this.handleSourceChange = this.handleSourceChange.bind(this);
    this.sort = this.sort.bind(this);
  }

  componentWillUnmount(){

  }

  componentDidMount(){
    this.setRowsFromSource();
    this.watchSource();
  }

  rowGetter(i){
    let { rows, sortBy, sortDir } = this.state;
    if(!sortDir) sortBy = 'ol_uid';
    const sortedRows = _.sortBy(rows, [sortBy]);
    if(sortDir === 2) sortedRows.reverse();
    return sortedRows[i];
  }

  onRowsDeselected(e){
    const { doRemoveFromEditorSelection } = this.props;
    const ids = [];
    e.forEach((row) => {
      ids.push(row.row.ol_uid);
    })
    doRemoveFromEditorSelection(ids);
  }

  onRowsSelected(e){
    const { doAddToEditorSelection } = this.props;
    const ids = [];
    e.forEach((row) => {
      ids.push(row.row.ol_uid);
    })
    doAddToEditorSelection(ids);
  }

  onRowsUpdated(e){
    const { source } = this.state;
    source.forEachFeature((feature) => {
      if(feature.ol_uid === e.toRowId) feature.setProperties(e.updated);
    })
  }

  setRowsFromSource(){
    const { source } = this.state;

    const rows = [];
    source.forEachFeature((feature) => {
      const row = {
        id: feature.ol_uid,
        ol_uid: feature.ol_uid,
        feature: feature
      }
      const properties = feature.getProperties();
      rows.push(Object.assign(row, properties))
    })
    this.setState({rows: rows});
  }

  handleSourceChange(e){
    const { doMarkAsDirty } = this.props;
    this.setRowsFromSource();
    if(e.type !== 'addfeature') doMarkAsDirty();
  }

  watchSource(){
    const { source } = this.state;
    source.on(['addfeature','removefeature','changefeature'], _.debounce(this.handleSourceChange, 200));
  }

  sort(newSortBy){
    const { sortBy, sortDir } = this.state;
    const newSortDir = newSortBy === sortBy ? ( sortDir + 1 ) % 3 : 1;
    this.setState({
      sortBy: newSortBy,
      sortDir: newSortDir
    })
  }

  render(){
    const { editorColumns, selectedIds } = this.props;
    const { rows } = this.state;
    const container = document.getElementsByClassName('south-container')[0];
    const minHeight = container ? container.clientHeight - 45 : 200;

    return (
      <ReactDataGrid
        enableCellSelect={ true }
        columns={ editorColumns }
        rowGetter={ this.rowGetter }
        rowsCount={ rows.length }
        minHeight={ minHeight }
        onGridRowsUpdated={ this.onRowsUpdated } 
        onGridSort={ this.sort }
        rowSelection={{
          showCheckbox: true,
          enableShiftSelect: false,
          onRowsSelected: this.onRowsSelected,
          onRowsDeselected: this.onRowsDeselected,
          selectBy: {
            keys: {
              rowKey: 'ol_uid', 
              values: selectedIds
            }
          }
        }}
      />
    )
  }
}

export default connect(
  'doMarkAsDirty',
  'doSaveEdits',
  'doAddToEditorSelection',
  'doRemoveFromEditorSelection',
  'selectSelectedIds',
  'selectEditorMetadata',
  'selectEditorColumns',
  'selectEditingMapLayer',
  EditorTable
);
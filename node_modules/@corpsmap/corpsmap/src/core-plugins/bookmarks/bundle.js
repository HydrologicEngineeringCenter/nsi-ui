export default {
  name: 'bookmarks',

  getReducer: () => {
    const initialData = {
      data: [],
      animIdx: 0,
      isAnimating: false
    }

    return (state = initialData, { type, payload }) => {

      if(type === 'BOOKMARK_SAVED'){
        return Object.assign({}, state, payload);
      }

      if(type === 'BOOKMARK_DELETED'){
        return Object.assign({}, state, payload);
      }

      if(type === 'BOOKMARK_ANIMATION_INCREMENT'){
        return Object.assign({}, state, payload);
      }
      
      if(type === 'BOOKMARK_ANIMATION_STARTED'){
        return Object.assign({}, state, {
          isAnimating: true
        });
      }

      if(type === 'BOOKMARK_ANIMATION_STOPPED'){
        return Object.assign({}, state, {
          animIdx: 0,
          isAnimating: false
        });
      }

      return state;
    }
  },

  doSaveBookmark: (bookmark) => ({ dispatch, store }) => {
    const bookmarks = store.selectBookmarks().slice()
    bookmarks.push(bookmark);
    dispatch({type: 'BOOKMARK_SAVED', payload: { data: bookmarks }});
  },

  doDeleteBookmark: (bookmark) => ({ dispatch, store }) => {
    const bookmarks = store.selectBookmarks().slice();
    const idx = bookmarks.indexOf(bookmark);
    bookmarks.splice(idx, 1);
    dispatch({type: 'BOOKMARK_DELETED', payload: { data: bookmarks }});
  },

  doGoToBookmark: (bookmark) => ({ dispatch, store }) => {
    store.doSetView(bookmark);
    dispatch({type: 'BOOKMARK_NAVIGATED'})
  },

  doIncrementBookmarkAnimation: () => ({dispatch, store}) => {
    const len = store.selectBookmarksLength();
    const currentIdx = store.selectBookmarkAnimationIdx();
    const newIdx = (currentIdx + 1) % len;
    dispatch({type: 'BOOKMARK_ANIMATION_INCREMENT', payload: { animIdx: newIdx }})
  },

  doStartBookmarkAnimation: () => ({dispatch}) => {
    dispatch({type: 'BOOKMARK_ANIMATION_STARTED'});
  },

  doStopBookmarkAnimation: () => ({dispatch}) => {
    dispatch({type: 'BOOKMARK_ANIMATION_STOPPED'});
  },

  selectBookmarks: (state) => {
    return state.bookmarks.data;
  },

  selectBookmarksLength: (state) => {
    return state.bookmarks.data.length;
  },

  selectBookmarksIsAnimating: (state) => {
    return state.bookmarks.isAnimating;
  },

  selectBookmarkAnimationIdx: (state) => {
    return state.bookmarks.animIdx;
  },

  persistActions: ['BOOKMARK_SAVED', 'BOOKMARK_DELETED']
}
import React from 'react';
import { connect } from 'redux-bundler-react';
import BookmarkList from './bookmark-list';
import classnames from 'classnames';

class BookmarkPanel extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      name: '',
      delay: 3000,
      animating: false,
      animIdx: 0
    }
    this.updateName = this.updateName.bind(this);
    this.updateDelay = this.updateDelay.bind(this);
    this.handleKeyUp = this.handleKeyUp.bind(this);
    this.save = this.save.bind(this);
    this.play = this.play.bind(this);
    this.stop = this.stop.bind(this);
  }

  handleKeyUp(e){
    if(e.keyCode === 13){
      this.save();
    }
  }

  updateName(e){
    const val = e.currentTarget.value;
    this.setState({
      name: val
    })
  }

  updateDelay(e){
    const val = e.currentTarget.value;
    this.setState({
      delay: val
    })
  }

  save(){
    const { name } = this.state;
    const { doSaveBookmark, viewState } = this.props;
    const newBookmark = Object.assign({ name: name }, viewState);
    this.setState({
      name: ''
    }, () => {
      doSaveBookmark(newBookmark);
    })
  }

  componentWillUnmount(){
    this.stop();
  }

  UNSAFE_componentWillReceiveProps(newProps){
    const { bookmarkAnimationIdx, bookmarksIsAnimating } = newProps;
    if(bookmarksIsAnimating && (bookmarkAnimationIdx !== this.props.bookmarkAnimationIdx)) this.goToBookmark(bookmarkAnimationIdx);
  } 

  // componentDidUpdate(){
  //   const { bookmarkAnimationIdx, bookmarksIsAnimating } = this.props;
  //   if(bookmarksIsAnimating) this.goToBookmark(bookmarkAnimationIdx);
  // }

  goToBookmark(idx){
    const { bookmarks, doGoToBookmark } = this.props;
    doGoToBookmark(bookmarks[idx]);
  }

  play(e){
    if(e.currentTarget.disabled) return;
    const { doIncrementBookmarkAnimation, doStartBookmarkAnimation, bookmarkAnimationIdx } = this.props;
    const { delay } = this.state;
    doStartBookmarkAnimation();
    this.counter = window.setInterval(doIncrementBookmarkAnimation, delay);
    this.goToBookmark(bookmarkAnimationIdx);
  }

  stop(){
    const { doStopBookmarkAnimation } = this.props;
    window.clearInterval(this.counter);
    doStopBookmarkAnimation();
  }

  render(){
    const { name, delay } = this.state;
    const { bookmarksLength, bookmarksIsAnimating } = this.props;
    const disabled = name === '';
    const btnClass = classnames({
      "cm-btn": true,
      "cm-btn-default": true,
      "cm-btn-sm": true,
      "disabled": disabled
    })
    return (
      <div>

        <div className="cm-form-group">
          <div className="cm-input-group">
            <input onChange={this.updateName} onKeyUp={this.handleKeyUp} value={name} type="text" className="cm-form-control cm-input-sm" placeholder="Name Bookmark..."></input>
            <span className="cm-input-group-btn">
              <button disabled={disabled} onClick={this.save} className={btnClass} type="button">
                <i className="mdi mdi-map-marker-plus icon-inline"></i>
                Add New
              </button>
            </span>
          </div>
        </div>

        <BookmarkList />

        <div className="cm-form-group" style={{position:'absolute', bottom:0, left:10, right:12 }}>
          <div className="cm-input-group">
            <input 
              disabled={(bookmarksLength < 2) || bookmarksIsAnimating}
              onChange={this.updateDelay} 
              value={delay} 
              type="number" 
              min={1000} 
              className="cm-form-control cm-input-sm" 
              placeholder="Delay..."
              title="Animation Delay in Milliseconds"
            ></input>
            <span className="cm-input-group-btn">
              <button disabled={(bookmarksLength < 2) || bookmarksIsAnimating} onClick={this.play} className={btnClass} type="button">
                <i className="mdi mdi-play"></i>
              </button>
            </span>
            <span className="cm-input-group-btn">
              <button disabled={(bookmarksLength < 2) || !bookmarksIsAnimating} onClick={this.stop} className={btnClass} type="button">
                <i className="mdi mdi-stop"></i>
              </button>
            </span>
          </div>
        </div>
        
      </div>
    )
  }
}

export default connect(
  'selectViewState',
  'selectBookmarks',
  'selectBookmarksLength',
  'selectBookmarksIsAnimating',
  'selectBookmarkAnimationIdx',
  'doSaveBookmark',
  'doGoToBookmark',
  'doStartBookmarkAnimation',
  'doStopBookmarkAnimation',
  'doIncrementBookmarkAnimation',
  BookmarkPanel
);
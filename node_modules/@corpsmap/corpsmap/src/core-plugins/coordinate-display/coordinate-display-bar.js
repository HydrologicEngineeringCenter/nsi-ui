import React from "react";
import { connect } from "redux-bundler-react";
import { BasicToolbarButton } from "../../application-controls";
import { transform } from "ol/proj";

class CoordinateDisplay extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      x: "0.0000",
      y: "0.0000",
    };

    this.started = false;

    this.pointerMove = this.pointerMove.bind(this);
    this.pointerMoveRedux = this.pointerMoveRedux.bind(this);
    this.throttledPointerMove = this.throttledPointerMove.bind(this);
  }

  componentWillUnMount() {
    const { map } = this.props;
    if (map) map.un("pointermove", this.throttledPointerMove);
  }

  componentDidUpdate() {
    const { map } = this.props;
    if (!this.started && map) {
      this.started = true;
      map.on("pointermove", this.throttledPointerMove);
    }
  }

  throttledPointerMove(e) {
    if (!this.timeout) {
      this.timeout = window.setTimeout(() => {
        this.timeout = null;
        this.pointerMove(e);
      }, 100);
    }
  }

  pointerMove(e) {
    const { displayProjection } = this.props;
    const coord = e.coordinate;
    const projected = transform(coord, "EPSG:3857", displayProjection);
    this.setState({
      x: "" + Math.round(projected[0] * 10000) / 10000,
      y: "" + Math.round(projected[1] * 10000) / 10000,
    });
  }

  pointerMoveRedux(e) {
    const { displayProjection, doUpdateCoords } = this.props;
    const coord = e.coordinate;
    const projected = transform(coord, "EPSG:3857", displayProjection);
    doUpdateCoords(
      "" + Math.round(projected[0] * 10000) / 10000,
      "" + Math.round(projected[1] * 10000) / 10000
    );
  }

  render() {
    const { x, y } = this.state;
    return (
      <BasicToolbarButton
        enabled={false}
        iconClass=""
        title={`Coordinate Displayed: ${x}, ${y}`}
        text={`${x}, ${y}`}
        onDeactivate={this.cleanUp}
        passProps={{ style: { minWidth: 200 } }}
      />
    );
  }
}

export default connect(
  "selectMap",
  "selectDisplayProjection",
  CoordinateDisplay
);

import React from 'react';
import isHtml from 'is-html';

class IdentifyPopup extends React.Component {
  constructor(props){
    super(props);
    this.overlay = props.overlay;
    this.startDrag = this.startDrag.bind(this);
    this.dragMe = this.dragMe.bind(this);
    this.placeMe = this.placeMe.bind(this);
    this.handleClose = this.handleClose.bind(this);
    this.renderValue = this.renderValue.bind(this);
  }
  
  componentDidMount(){
    this.dragHandle.addEventListener('mousedown', this.startDrag);
    this.closeButton.addEventListener('click', this.handleClose);
  }

  componentWillUnmount(){
    this.dragHandle.removeEventListener('mousedown', this.startDrag);
    this.closeButton.removeEventListener('click', this.handleClose);
  }

  handleClose(){
    const { onClear, overlay } = this.props;
    onClear(overlay);
  }

  startDrag(e){
    const { map } = this.props;
    const pixel = [e.clientX, e.clientY];
    const coord = map.getCoordinateFromPixel(pixel);
    const origPosition = this.overlay.getPosition();
    this.offset = [ origPosition[0] - coord[0], origPosition[1] - coord[1] ];
    map.on('pointermove', this.dragMe);
    window.addEventListener('mouseup', this.placeMe);
    this.overlay.set('dragging', true);
  }

  dragMe(e){
    if(this.overlay.get('dragging')){
      this.overlay.setPosition([e.coordinate[0] + this.offset[0], e.coordinate[1] + this.offset[1]]);
    }
  }

  placeMe(e){
    const { map } = this.props;
    if(this.overlay.get('dragging')){
      map.un('pointermove', this.dragMe);
      window.removeEventListener('mouseup', this.placeMe);
      this.overlay.set('dragging', false);
    }
  }

  renderValue(val){
    if(val && typeof val === 'string'){
      if(isHtml(val)){
        return (
          <span 
            className="col-sm-6" 
            style={{overflow:'hidden'}}
            dangerouslySetInnerHTML={{__html:val}}>
          </span>
        )
      }else{
        if(val.indexOf('http') !== -1){
          return (
            <span 
              className="col-sm-6 overflow-ellipsis" 
              title={val}>
              <a href={val} target="_blank">
                {val}
              </a>
            </span>
          )
        }else{
          return (
            <span 
              className="col-sm-6 overflow-ellipsis" 
              title={val}>{val}
            </span>
          )
        }
      }
    }else{
      return (
        <span 
          className="col-sm-6 overflow-ellipsis" 
          title={val}>{val}
        </span>
      )
    }
  }

  render(){
    const { feature } = this.props;
    return ( 
      <div className="panel panel-default top clearfix" style={{marginBottom:0, marginTop:'-10px'}}>
        <div className="pull-right" ref={ (el) => {this.closeButton = el} }>
          <i className="mdi mdi-close"></i>
        </div>
        <div className="pull-left" ref={ (el) => {this.dragHandle = el} }>
          <i className="mdi mdi-drag"></i>
        </div>
        <div className="arrow" style={{left: '50%'}}></div>
        <div className="panel-body">
          <p className=""><strong></strong></p>
          <div className="">
            <ul className="cm-list-group thin-scrollbar" style={{maxHeight: 300, overflow:'auto'}}>
              { 
                Object.keys(feature.properties).map((key, i) => {
                  return (
                    <li 
                      className="cm-list-group-item row" 
                      key={i}
                      style={{
                        margin:'3px',
                        padding:'2px',
                        maxWidth:'500px'
                      }}>
                      <span className="col-sm-6 overflow-ellipsis" title={key}>{key}</span>
                      {this.renderValue(feature.properties[key])}
                    </li>
                  )
                })
              }
            </ul>
          </div>
        </div>
      </div>
    )
  }
}

export default IdentifyPopup;
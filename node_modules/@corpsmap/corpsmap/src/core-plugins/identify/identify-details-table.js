import React from "react";
import { connect } from "redux-bundler-react";
import isHtml from "is-html";

class IdentifyDetails extends React.Component {
  constructor(props) {
    super(props);
    this.renderValue = this.renderValue.bind(this);
  }

  componentDidMount() {
    const { map, identifyDetailLayer } = this.props;
    map.addLayer(identifyDetailLayer);
  }

  componentWillUnmount() {
    const { map, identifyDetailLayer } = this.props;
    map.removeLayer(identifyDetailLayer);
  }

  renderValue(val) {
    if (val && typeof val === "string") {
      if (isHtml(val)) {
        return (
          <td
            className="col-sm-8 overflow-ellipsis"
            dangerouslySetInnerHTML={{ __html: val }}
          ></td>
        );
      } else {
        if (val.indexOf("http") !== -1) {
          return (
            <td className="col-sm-8 overflow-ellipsis" title={val}>
              <a href={val}>{val}</a>
            </td>
          );
        } else {
          return (
            <td className="col-sm-8 overflow-ellipsis" title={val}>
              {val}
            </td>
          );
        }
      }
    } else {
      return (
        <td className="col-sm-8 overflow-ellipsis" title={val}>
          {val}
        </td>
      );
    }
  }

  render() {
    const { identifyDetailFeature, doRenderIdentifySidebar } = this.props;

    return (
      <div>
        <div>
          <span
            onClick={doRenderIdentifySidebar}
            style={{
              fontSize: 24,
              cursor: "pointer",
            }}
            title="Return to List"
          >
            <i className="mdi mdi-arrow-left"></i>
          </span>
        </div>
        <div className="thin-scrollbar sidebar-list" style={{ top: 32 }}>
          <table className="table table-striped table-hover ">
            <thead>
              <tr>
                <th className="overflow-ellipsis">
                  <strong>Attribute</strong>
                </th>
                <th className="overflow-ellipsis">
                  <strong>Value</strong>
                </th>
              </tr>
            </thead>
            <tbody>
              {Object.keys(identifyDetailFeature.properties).map((key, i) => {
                return (
                  <tr key={btoa(key) + i}>
                    <td className="col-sm-4 overflow-ellipsis" title={key}>
                      {key}
                    </td>
                    {this.renderValue(identifyDetailFeature.properties[key])}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    );
  }
}

export default connect(
  "selectIdentifyDetailFeature",
  "doRenderIdentifySidebar",
  "selectIdentifyDetailLayer",
  "selectMap",
  IdentifyDetails
);

import React from "react";
import ReactDOM from "react-dom";
import IdentifySidebar from "./identify-sidebar";
import IdentifyDetails from "./identify-details-table";
import IdentifyTable from "./identify-table";
import Popup from "./identify-popup";
import { getLayer } from "../../openlayers-utils/layer-utilities";
import createInteraction from "../../openlayers-utils/interaction-creator";
import Overlay from "ol/Overlay";
import { transform } from "ol/proj";
import centroid from "@turf/centroid";
import find from "lodash/find";

const polygonLayer = getLayer({
  serviceType: "LocalVector",
  visible: true,
  geometryType: "Polygon",
});

const polygonDraw = createInteraction({
  interaction: "draw",
  source: polygonLayer.getSource(),
  type: "Polygon",
});

const pointLayer = getLayer({
  serviceType: "LocalVector",
  visible: true,
  geometryType: "Polygon",
});

const pointDraw = createInteraction({
  interaction: "draw",
  source: pointLayer.getSource(),
  type: "Point",
});

const identify = {
  overlays: [],
};

export default {
  name: "identifyUi",

  getReducer() {
    const initialData = {
      selectBy: null,
      displayAs: "sidebar",
      shouldQuery: false,
      shouldRenderResults: false,
      shouldRenderDetails: false,
      geom: null,
      results: [],
      selectedFeature: null,
      selectedLayer: null,
    };

    return (state = initialData, { type, payload }) => {
      switch (type) {
        case "IDENTIFY_UI_STARTED":
        case "IDENTIFY_UI_STOPPED":
        case "IDENTIFY_UI_DISPLAY_AS":
        case "IDENTIFY_UI_RESULTS_DISPLAYED":
        case "IDENTIFY_UI_RESULT_PICKED":
        case "IDENTIFY_UI_DETAILS_DISPLAYED":
        case "IDENTIFY_UI_TABLE_DISPLAYED":
        case "IDENTIFY_UI_NO_RESULTS_RETURNED":
          return Object.assign({}, state, payload);
        case "IDENTIFY_ERROR":
          return Object.assign({}, state, {
            selectBy: null,
          });
        case "IDENTIFY_SUCCESS":
          return Object.assign({}, state, {
            shouldRenderResults: true,
            selectBy: null,
          });
        default:
          return state;
      }
    };
  },

  doStartIdentify: (selectBy) => ({ dispatch, store }) => {
    dispatch({ type: "IDENTIFY_UI_STARTED", payload: { selectBy: selectBy } });
    store.doAddIdentifyInteractions();
  },

  doAddIdentifyInteractions: () => ({ store }) => {
    const selectBy = store.selectIdentifySelectBy();
    store.doRemoveIdentifyInteractions();
    if (selectBy === "point") {
      store.doIdentifyByPoint();
    } else if (selectBy === "polygon") {
      store.doIdentifyByPolygon();
    }
  },

  doRemoveIdentifyInteractions: () => ({ dispatch, store }) => {
    store.doSetCursor();
    const map = store.selectMap();
    map.removeInteraction(pointDraw);
    map.removeInteraction(polygonDraw);
  },

  doSetIdentifyGeom: (e) => ({ store }) => {
    const feature = e.feature;
    const geom = feature.getGeometry();
    store.doIdentifySetCoords(geom);
  },

  doIdentifyByPoint: () => ({ dispatch, store }) => {
    store.doSetCursor("default");
    const map = store.selectMap();
    map.addInteraction(pointDraw);
  },

  doIdentifyByPolygon: () => ({ dispatch, store }) => {
    store.doSetCursor("default");
    const map = store.selectMap();
    map.addInteraction(polygonDraw);
  },

  doPauseIdentify: () => ({ dispatch, store }) => {
    store.doRemoveIdentifyInteractions();
    dispatch({ type: "IDENTIFY_UI_STOPPED", payload: { selectBy: null } });
  },

  doStopIdentify: () => ({ dispatch, store }) => {
    store.doRemoveIdentifyInteractions();
    store.doClearIdentifyPopups();
    dispatch({ type: "IDENTIFY_UI_STOPPED", payload: { selectBy: null } });
  },

  doSetDisplayAs: (displayAs) => ({ dispatch }) => {
    dispatch({
      type: "IDENTIFY_UI_DISPLAY_AS",
      payload: { displayAs: displayAs },
    });
  },

  doRenderIdentifyPopups: () => ({ dispatch, store }) => {
    dispatch({
      type: "IDENTIFY_UI_RESULTS_DISPLAYED",
      payload: { shouldRenderResults: false },
    });
    const map = store.selectMap();
    const results = store.selectIdentifyResults();

    results.forEach((r) => {
      Object.keys(r.result).forEach((key) => {
        const fc = r.result[key];
        if (fc && fc.features && fc.features.length) {
          fc.features.forEach((feature) => {
            const el = document.createElement("div");
            const overlay = new Overlay({
              element: el,
              positioning: "bottom-center",
              offset: [0, -10],
              autoPan: true,
              autoPanAnimation: {
                duration: 250,
              },
              autoPanMargin: 50,
            });
            map.addOverlay(overlay);
            ReactDOM.render(
              <Popup
                overlay={overlay}
                feature={feature}
                map={map}
                onClear={store.doClearOverlay}
              />,
              el
            );

            const center = centroid(feature);
            overlay.setPosition(
              transform(center.geometry.coordinates, "EPSG:4326", "EPSG:3857")
            );
            identify.overlays.push(overlay);
          });
        } else {
          dispatch({
            type: "IDENTIFY_UI_NO_RESULTS_RETURNED",
            payload: {
              notification: {
                message: "No results at this location.",
                level: "warning",
              },
            },
          });
        }
      });
    });
  },

  doClearOverlay: (overlay) => ({ store }) => {
    const map = store.selectMap();
    if (identify.overlays && identify.overlays.length) {
      const idx = identify.overlays.indexOf(overlay);
      overlay.setPosition(undefined);
      const el = overlay.getElement();
      el.parentNode.removeChild(el);
      map.removeOverlay(overlay);
      identify.overlays.splice(idx, 1);
    }
  },

  doClearIdentifyPopups: () => ({ store }) => {
    const map = store.selectMap();
    if (identify.overlays && identify.overlays.length) {
      identify.overlays.forEach((overlay) => {
        overlay.setPosition(undefined);
        const el = overlay.getElement();
        el.parentNode.removeChild(el);
        map.removeOverlay(overlay);
      });
      identify.overlays = [];
    }
  },

  doRenderIdentifySidebar: () => ({ dispatch, store }) => {
    dispatch({
      type: "IDENTIFY_UI_RESULTS_DISPLAYED",
      payload: { shouldRenderResults: false },
    });
    const results = store.selectIdentifyResults();

    if (results.length) {
      for (let i = 0; i < results.length; i++) {
        const rDataset = Object.keys(results[i].result);
        for (let j = 0; j < rDataset.length; j++) {
          const fc = results[i].result[rDataset[j]];
          if (fc && fc.features && fc.features.length) {
            //open sidebar panel
            store.doPrimaryPanelOpen({
              openedBy: "IdentifyTools",
              children: [IdentifySidebar],
            });
            break;
          } else {
            dispatch({
              type: "IDENTIFY_UI_NO_RESULTS_RETURNED",
              payload: {
                notification: {
                  message: "No results at this location.",
                  level: "warning",
                },
              },
            });
          }
        }
      }
    }
  },

  doOpenIdentifyDetails: (feature, layer) => ({ dispatch }) => {
    dispatch({
      type: "IDENTIFY_UI_RESULT_PICKED",
      payload: {
        selectedFeature: feature,
        selectedLayer: layer,
        shouldRenderDetails: true,
      },
    });
  },

  doRenderIdentifyDetails: () => ({ dispatch, store }) => {
    dispatch({
      type: "IDENTIFY_UI_DETAILS_DISPLAYED",
      payload: { shouldRenderDetails: false },
    });
    store.doPrimaryPanelOpen({
      openedBy: "IdentifyTools",
      children: [IdentifyDetails],
    });
  },

  doRenderIdentifyTable: () => ({ dispatch, store }) => {
    dispatch({
      type: "IDENTIFY_UI_RESULTS_DISPLAYED",
      payload: { shouldRenderResults: false },
    });
    const results = store.selectIdentifyResults();
    const cmLayerNames = store.selectCmLayerNames();
    const uidMap = store.selectUidMap();
    const subLayerNameMatch = /[:](.+)/i;

    results.forEach((r) => {
      const id = r.dataset;
      const lyr = find(cmLayerNames, { teamDatasetId: id });
      const lyrName = !lyr ? uidMap[id] : lyr.displayName;

      Object.keys(r.result).forEach((key) => {
        const fc = r.result[key];
        const subLayer = subLayerNameMatch.exec(key);
        const subLayerName = subLayer
          ? subLayer[0] !== lyrName
            ? subLayer[0]
            : ""
          : "";
        if (fc && fc.features && fc.features.length) {
          store.doSouthRegionOpen({
            component: IdentifyTable,
            options: {
              features: fc.features,
            },
            openedBy: "identify",
            displayName: `${lyrName}${subLayerName}`,
          });
        } else {
          dispatch({
            type: "IDENTIFY_UI_NO_RESULTS_RETURNED",
            payload: {
              notification: {
                message: "No results at this location.",
                level: "warning",
              },
            },
          });
        }
      });
    });
  },

  selectIdentifySelectBy: (state) => {
    return state.identifyUi.selectBy;
  },

  selectIdentifyDisplayAs: (state) => {
    return state.identifyUi.displayAs;
  },

  selectIdentifyDetailFeature: (state) => {
    return state.identifyUi.selectedFeature;
  },

  selectIdentifyDetailLayer: (state) => {
    return state.identifyUi.selectedLayer;
  },

  reactShouldRunIdentify: (state) => {
    if (state.identifyUi.shouldQuery) return { actionCreator: "doIdentify" };
  },

  reactShouldRenderIdentifyResults: (state) => {
    if (state.identifyUi.shouldRenderResults) {
      if (state.identifyUi.displayAs === "popup") {
        return { actionCreator: "doRenderIdentifyPopups" };
      } else if (state.identifyUi.displayAs === "sidebar") {
        return { actionCreator: "doRenderIdentifySidebar" };
      } else if (state.identifyUi.displayAs === "table") {
        return { actionCreator: "doRenderIdentifyTable" };
      }
    }
  },

  reactShouldRenderIdentifyDetails: (state) => {
    if (state.identifyUi.shouldRenderDetails)
      return { actionCreator: "doRenderIdentifyDetails" };
  },

  init: (store) => {
    pointDraw.on("drawend", store.doSetIdentifyGeom);
    polygonDraw.on("drawend", store.doSetIdentifyGeom);
  },
};

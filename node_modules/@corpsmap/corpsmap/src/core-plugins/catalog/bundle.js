import _ from 'lodash';

export default {
  name: 'catalog',

  getReducer(){
    const initialData = {
      filter: '',
      limit: 10,
      offset: 0,
      items: [],
      shouldQuery: true,
      loading: false,
      err: null
    }

    return (state = initialData, { type, payload }) => {

      if(type === 'CATALOG_API_LOADING'){
        return Object.assign({}, state, payload);
      }

      if(type === 'CATALOG_API_ERROR'){
        return Object.assign({}, state, payload);
      }

      if(type === 'CATALOG_API_LOADED'){
        return Object.assign({}, state, payload);
      }

      if(type === 'CATALOG_QUERIED'){
        return Object.assign({}, state, payload);
      }

      if(type === 'CATALOG_PAGED_UP'){
        return Object.assign({}, state, payload);
      }

      if(type === 'AUTH_LOGGED_IN'){
        return Object.assign({}, state, {
          shouldQuery: true
        });
      }

      if(type === 'AUTH_LOGGED_OUT'){
        return Object.assign({}, state, {
          shouldQuery: true
        });
      }

      return state;
    }
  },

  doLoadCatalog: () => ({ dispatch, store, apiGet }) => {
    dispatch({type:'CATALOG_API_LOADING', payload: { shouldQuery: false, loading: true }});
    const root = store.selectApiRoot();
    const { limit, offset, filter, items } = store.selectCatalogState();
    apiGet(`${root}/metadata/catalogsearch?limit=${limit}&offset=${offset}&q=${filter}`,
    (err, response, body) => {
      if(err){
        dispatch({type:'CATALOG_API_ERROR', payload: { loading: false, err: { err, response }}});
      }else{
        const json = JSON.parse(body);
        if(json){
          dispatch({type:'CATALOG_API_LOADED', payload: { loading: false, items: items.concat(_.flatten(json))}});
        }
      }
    })
  },

  doCatalogQuery: (filter) => ({ dispatch }) => {
    dispatch({type: 'CATALOG_QUERIED', payload: { shouldQuery: true, filter: filter, items: [], offset: 0 }});
  },

  doCatalogPageUp: () => ({ dispatch, store }) => {
    const { limit, offset } = store.selectCatalogState();
    dispatch({type: 'CATALOG_PAGED_UP', payload: { shouldQuery: true, offset: offset + limit }})
  },

  selectCatalogState: (state) => {
    return state.catalog;
  },

  selectCatalogFilter: (state) => {
    return state.catalog.filter;
  },

  selectCatalogLimit: (state) => {
    return state.catalog.limit;
  },

  selectCatalogOffset: (state) => {
    return state.catalog.offset;
  },

  selectCatalogItems: (state) => {
    return state.catalog.items;
  },

  selectCatalogIsLoading: (state) => {
    return state.catalog.loading;
  },

  reactShouldQuery: (state) => {
    if(state.catalog.shouldQuery) return { actionCreator: 'doLoadCatalog' };
  }

}
import React from "react";
import { connect } from 'redux-bundler-react';
import CatalogErrorItem from './catalog-error-item';
import CatalogListItem from "./catalog-list-item";
import CatalogListItemLoader from "./catalog-list-item-loader";

class CatalogList extends React.Component {
  constructor(props){
    super(props);
    this.amidonescrolling = this.amidonescrolling.bind(this);
    this.addItems = this.addItems.bind(this);
  }

  amidonescrolling(){
    const clientHeight = this.el.clientHeight;
    const scrollTop = this.el.scrollTop;
    const scrollHeight = this.el.scrollHeight;
    const isDone = (scrollHeight - (clientHeight + scrollTop) === 0);
    if(isDone) this.addItems();
  }

  addItems(){
    const { doCatalogPageUp } = this.props;
    doCatalogPageUp();
  }
  
  componentDidMount(){
    this.el.addEventListener('scroll', this.amidonescrolling.bind(this));
  }

  componentWillUnmount(){
    this.el.removeEventListener('scroll', this.amidonescrolling.bind(this));
  }

  render() {
    const { catalogItems, catalogIsLoading, onSetSearchTerm, cmLayers } = this.props;
    return (
      <ul
        ref={(el) => {this.el = el}}
        className="cm-list-group thin-scrollbar"
        style={{
          position: "absolute",
          top: '95px',
          bottom: 0,
          left: 0,
          right: 0,
          margin: "15px",
          overflow: "auto",
          border: "1px solid #dddddd"
        }}
      >
        {
          catalogItems.map((item, i) => {
            if(item === 'error') return <CatalogErrorItem key={i}/>
            return <CatalogListItem key={i + item.displayName} active={cmLayers.indexOf(item.teamDatasetId) !== -1} item={item} onSetSearchTerm={onSetSearchTerm}/>;
          })
        }
        { catalogIsLoading ? <CatalogListItemLoader /> : null}
      </ul>
    );
  }
}

export default connect(
  'selectCatalogIsLoading',
  'selectCatalogItems',
  'selectCmLayers',
  'doCatalogPageUp',
  CatalogList
);
import createInteraction from '../../openlayers-utils/interaction-creator';

const zoombox = createInteraction({
  interaction: 'dragbox'
})

export default {
  name: 'zoombox',

  getReducer(){
    const initialData = {
      geom: null,
      shouldZoom: false
    }

    return (state = initialData, { type, payload }) => {

      if(type === 'ZOOMBOX_BOXENDED'){
        return Object.assign({}, state, payload);
      }

      if(type === 'ZOOMBOX_ZOOMSTART'){
        return Object.assign({}, state, payload);
      }

      if(type === 'ZOOMBOX_ZOOMEND'){
        return Object.assign({}, state, payload);
      }

      return state;
    }
  },

  doStartZoomBox: () => ({ dispatch, store }) => {
    store.doSetCursor('zoom-in');
    const map = store.selectMap();
    map.addInteraction(zoombox);
    zoombox.on('boxend', store.doGetZoomGeom);
    dispatch({ type: 'ZOOMBOX_STARTED' });
  },

  doGetZoomGeom: () => ({ dispatch, store }) => {
    dispatch({ type: 'ZOOMBOX_BOXENDED', payload: { geom: zoombox.getGeometry(), shouldZoom: true }});
  },

  doStopZoomBox: () => ({ dispatch, store }) => {
    store.doSetCursor()
    const map = store.selectMap();
    map.removeInteraction(zoombox);
    zoombox.un('boxend', store.doGetZoomGeom);
    dispatch({ type: 'ZOOMBOX_STOPPED' });
  },

  doZoomBox: () => ({dispatch, store}) => {
    dispatch({ type: 'ZOOMBOX_ZOOMSTART', payload: { shouldZoom: false }});
    const geom = store.selectZoomBoxGeom();
    store.doZoomToExtent(geom, 0.1);
    dispatch({ type: 'ZOOMBOX_ZOOMEND', payload: { geom: null }});
  },

  selectZoomBoxGeom: (state) => {
    return state.zoombox.geom;
  },

  reactShouldZoom: (state) => {
    if(state.zoombox.shouldZoom) return { actionCreator: 'doZoomBox' }
  }


}
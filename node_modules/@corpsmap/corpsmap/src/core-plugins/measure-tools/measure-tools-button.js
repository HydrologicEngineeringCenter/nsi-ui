import React from "react";
import { connect } from "redux-bundler-react";
import {
  BasicToolbarButton,
  BasicToolbarMenu,
  BasicToolbarMenuItem,
  BasicToolbarMenuDivider,
} from "../../application-controls";
import Settings from "./measure-options";

class MeasureToolsButton extends React.Component {
  constructor(props) {
    super(props);

    this.startMeasure = this.startMeasure.bind(this);
    this.pauseMeasure = this.pauseMeasure.bind(this);
    this.stopMeasure = this.stopMeasure.bind(this);
    this.openSettings = this.openSettings.bind(this);
    this.copy = this.copy.bind(this);
  }

  startMeasure(e) {
    const { doStartMeasure, doStopMeasure } = this.props;
    doStopMeasure();
    doStartMeasure(e.currentTarget.dataset.type);
  }

  pauseMeasure() {
    const { doPauseMeasure } = this.props;
    doPauseMeasure();
  }

  stopMeasure() {
    const { doStopMeasure } = this.props;
    doStopMeasure();
  }

  openSettings() {
    const { doModalOpen } = this.props;
    doModalOpen({
      children: [Settings],
      options: {},
      openedBy: "MeasureArea",
    });
  }

  copy() {
    const { doNotificationsFire, measureOutput } = this.props;
    if (measureOutput.val !== 0) {
      const valueEl = document.createElement("input");
      document.body.appendChild(valueEl);
      valueEl.value = measureOutput.output;
      valueEl.select();
      document.execCommand("copy");
      valueEl.remove();
      doNotificationsFire({
        title: "Measure Tools",
        message: `Copied ${measureOutput.output} to the clipboard`,
        level: "info",
      });
    }
  }

  render() {
    const { measureOutput, measureType } = this.props;
    return (
      <BasicToolbarButton
        enabled={true}
        iconClass="cm cm-measure-line"
        title="Measure Tools"
        onDeactivate={this.pauseMeasure}
      >
        <BasicToolbarMenu>
          <BasicToolbarMenuItem
            active={measureType === "distance"}
            iconClass="cm cm-measure-line icon-inline"
            title="Measure Distance"
            text="Measure Distance"
            onClick={this.startMeasure}
            passProps={{ "data-type": "distance" }}
          />
          <BasicToolbarMenuItem
            active={measureType === "area"}
            iconClass="cm cm-measure-area icon-inline"
            title="Measure Area"
            text="Measure Area"
            onClick={this.startMeasure}
            passProps={{ "data-type": "area" }}
          />
          <BasicToolbarMenuDivider />
          <BasicToolbarMenuItem
            active={false}
            iconClass="mdi mdi-content-copy icon-inline"
            title="Copy measurement to clipboard"
            liveDangerously={true}
            text={measureOutput.output}
            onClick={this.copy}
            passProps={{ "data-clipboard-text": measureOutput.value }}
          />
          <BasicToolbarMenuItem
            active={false}
            iconClass="mdi mdi-delete icon-inline"
            title="Clear"
            text="Clear"
            onClick={this.stopMeasure}
          />
          <BasicToolbarMenuItem
            active={false}
            iconClass="mdi mdi-settings icon-inline"
            title="Measure Options"
            text="Measure Options"
            onClick={this.openSettings}
          />
        </BasicToolbarMenu>
      </BasicToolbarButton>
    );
  }
}

export default connect(
  "doStartMeasure",
  "doStopMeasure",
  "doPauseMeasure",
  "doNotificationsFire",
  "doModalOpen",
  "selectMeasureOutput",
  "selectMeasureType",
  MeasureToolsButton
);

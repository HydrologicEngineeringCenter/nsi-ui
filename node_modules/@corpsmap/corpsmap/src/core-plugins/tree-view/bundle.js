import { createSelector } from "redux-bundler";
import _ from "lodash";
import TreeviewPanel from "./tree-view-panel";
import LayerSubpanel from "./layer-subpanel/layer-subpanel";

export const treeView = (controls) => {
  return {
    name: "treeview",

    getReducer() {
      const initialData = {
        rootNodeCreated: false,
        configLayersLoaded: false,
        shouldRenderDetails: false,
        selectedItem: null,
        toggleExpanded: true,
        controls: controls,
      };

      return (state = initialData, { type, payload }) => {
        switch (type) {
          case "TREEVIEW_ROOT_CREATED":
          case "TREEVIEW_LOADED":
          case "TREEVIEW_DETAILS_PICKED":
          case "TREEVIEW_DETAILS_DISPLAYED":
          case "TREEVIEW_FOLDERS_TOGGLED":
            return Object.assign({}, state, payload);
          default:
            return state;
        }
      };
    },

    doTreeCreateRootNode: () => ({ dispatch, store }) => {
      dispatch({
        type: "TREEVIEW_ROOT_CREATED",
        payload: { rootNodeCreated: true },
      });
      store.doAddLayer({
        id: "treeview-root",
        root: true,
        leaf: false,
        teamDatasetId: null,
        collapsed: false,
        visible: false,
        sortOrder: 0,
        displayName: "Root",
        type: "Folder",
      });
    },

    doTreeLoadDefaultLayers: () => ({ dispatch, store }) => {
      dispatch({
        type: "TREEVIEW_LOADED",
        payload: { configLayersLoaded: true },
      });
      const params = store.selectWindowLocationParams();
      const turnOn = !params.layers ? [] : params.layers.split(",").map(Number);
      const layers = store.selectDefaultLayers();
      const sortedLayers = _.orderBy(
        layers,
        ["parentId", "layerOrder"],
        ["desc", "asc"]
      );
      sortedLayers.forEach((lyr) => {
        if (lyr.parentId) {
          const idMap = store.selectIdMap();
          lyr.parentUid = idMap[lyr.parentId];
        } else {
          lyr.parentUid = store.selectTreeViewRootId();
        }
        if (lyr.teamDatasetId && turnOn.indexOf(lyr.teamDatasetId) !== -1) {
          lyr.visible = true;
        }
        store.doAddLayer(lyr);
      });
    },

    doRenderTreeView: () => ({ dispatch, store }) => {
      store.doPrimaryPanelOpen({
        openedBy: "LayerTree",
        children: [TreeviewPanel],
      });
    },

    doOpenLayerDetails: (item) => ({ dispatch, store }) => {
      dispatch({
        type: "TREEVIEW_DETAILS_PICKED",
        payload: { shouldRenderDetails: true, selectedItem: item },
      });
    },

    doRenderLayerDetails: () => ({ dispatch, store }) => {
      dispatch({
        type: "TREEVIEW_DETAILS_DISPLAYED",
        payload: { shouldRenderDetails: false },
      });
      store.doPrimaryPanelOpen({
        openedBy: "LayerTree",
        children: [LayerSubpanel],
      });
    },

    selectTreeRootNode: createSelector(
      "selectLayers",
      "selectTreeViewRootId",
      "selectAppTime",
      (layers, uid, appTime) => {
        return Object.assign({}, layers[uid]);
      }
    ),
    doTreeViewToggleExpand: () => ({ dispatch, store }) => {
      const state = store.selectTreeViewToggleExpanded();
      const treeViewRootId = store.selectTreeViewRootId();
      store.doTreeSetCollapsedAll(treeViewRootId, !state);

      dispatch({
        type: "TREEVIEW_FOLDERS_TOGGLED",
        payload: { toggleExpanded: !state },
      });
    },
    doTreeViewAddAll: () => ({ dispatch, store }) => {
      const treeViewRootId = store.selectTreeViewRootId();
      store.doTreeSetVisibleAll(treeViewRootId, true);
    },
    doTreeViewRemoveAll: () => ({ dispatch, store }) => {
      const treeViewRootId = store.selectTreeViewRootId();
      store.doTreeSetVisibleAll(treeViewRootId, false);
    },

    selectTreeViewRootId: createSelector("selectIdMap", (idMap) => {
      return idMap["treeview-root"];
    }),

    selectTreeViewToggleExpanded: (state) => {
      return state.treeview.toggleExpanded;
    },
    selectTreeViewSelectedItem: (state) => {
      return state.treeview.selectedItem;
    },
    selectTreeViewControls: (state) => {
      return state.treeview.controls;
    },
    reactCreateRootNode: (state) => {
      if (!state.treeview.rootNodeCreated)
        return { actionCreator: "doTreeCreateRootNode" };
    },

    reactLoadLayersFromConfig: (state) => {
      if (state.treeview.rootNodeCreated && !state.treeview.configLayersLoaded)
        return { actionCreator: "doTreeLoadDefaultLayers" };
    },

    reactShouldRenderLayerDetails: (state) => {
      if (state.treeview.shouldRenderDetails)
        return { actionCreator: "doRenderLayerDetails" };
    },
  };
};
export default treeView;

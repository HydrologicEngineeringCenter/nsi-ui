import React from 'react';
import { connect } from 'redux-bundler-react';
import classnames from 'classnames';

class BasicToolbarButton extends React.Component {
  constructor(props){
    super(props);
    this.state = { 
      open: false
    }
    this.renderIcon = this.renderIcon.bind(this);
    this.toggleTool = this.toggleTool.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  UNSAFE_componentWillReceiveProps(newProps){
    const { basicToolbarActiveTool, title, onDeactivate } = newProps;
    if(basicToolbarActiveTool !== title && this.state.open) this.setState({ 
      open: false
    }, () => {
      if(!this.state.open && onDeactivate) onDeactivate();
    });
  }

  handleClick(){
    const { enabled, doBasicToolbarActivate, doBasicToolbarDeactivate, basicToolbarActiveTool, title, onActivate, onDeactivate } = this.props;
    if(!enabled) return;
    const active = basicToolbarActiveTool === title;
    if(active){
      doBasicToolbarDeactivate();
      if(onDeactivate) onDeactivate();
    }else{
      doBasicToolbarActivate({
        activeTool: title
      });
      if(onActivate) onActivate();
    }
  }

  toggleTool(){
    const { enabled, doBasicToolbarActivate, title, doBasicToolbarDeactivate, onActivate, onDeactivate } = this.props;
    if(!enabled) return;
    this.setState({open:!this.state.open}, () => {
      if(this.state.open){
        doBasicToolbarActivate({
          activeTool: title
        })
        if(onActivate) onActivate();
      }else{
        doBasicToolbarDeactivate()
        if(onDeactivate) onDeactivate();
      }
    })
  }

  renderIcon(){
    const { children, text, title, iconClass, iconStyle, basicToolbarActiveTool, dropup } = this.props;

    const btnClass = classnames({
      'cm-btn': true,
      'cm-btn-lg': true,
      'basic-toolbar-btn': true,
      'cm-dropdown-toggle': true,
      'active': (basicToolbarActiveTool === title)
    })

    const arrowIcon = classnames({
      'mdi': true,
      'mdi-menu-down': !dropup,
      'mdi-menu-up': dropup
    })

    if(children){
      return (
        <div  onClick={ this.toggleTool } className={ btnClass }>
          <i className={ iconClass } style={ iconStyle }/>{ text }
          <i className={ arrowIcon } />
        </div>
      )
    }else{
      return (
        <div  onClick={ this.toggleTool } className={ btnClass } style={{textAlign: 'center'}}>
          <i className={ iconClass } style={ iconStyle }/>{ text }
        </div>
      )
    }
  }

  render(){
    const { theme, basicToolbarActiveTool, title, children, dropup, passProps } = this.props;
    const { open } = this.state;

    const btnContainerClass = classnames({
      [theme]: true,
      'cm-btn-group': true,
      'open': open
    })

    const activeClass = classnames({
      'basic-toolbar-btn-active': !dropup,
      'basic-toolbar-btn-active-top': dropup,
      'hidden': !(basicToolbarActiveTool === title)
    })

    return (
      <div className={btnContainerClass} {...passProps} title={title}>
        <div className={activeClass} />
        { this.renderIcon() }
        { children }
      </div>
    )
  }
}

export default connect(
  'selectTheme',
  'selectBasicToolbarActiveTool',
  'doBasicToolbarActivate',
  'doBasicToolbarDeactivate',
  BasicToolbarButton
);
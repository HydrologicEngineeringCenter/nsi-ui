{"ast":null,"code":"import { createElement, Component, Children } from 'react';\nvar CONTEXT_TYPES = {\n  store: function () {}\n};\n\nvar Provider = function (Component$$1) {\n  function Provider() {\n    Component$$1.apply(this, arguments);\n  }\n\n  if (Component$$1) Provider.__proto__ = Component$$1;\n  Provider.prototype = Object.create(Component$$1 && Component$$1.prototype);\n  Provider.prototype.constructor = Provider;\n\n  Provider.prototype.getChildContext = function getChildContext() {\n    return {\n      store: this.props.store\n    };\n  };\n\n  Provider.prototype.render = function render() {\n    return Children.only(this.props.children);\n  };\n\n  return Provider;\n}(Component);\n\nProvider.childContextTypes = CONTEXT_TYPES;\n\nvar connect = function () {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  var Comp = args.slice(-1)[0];\n  var strings = args.length > 1 ? args.slice(0, -1) : [];\n  var actionCreators = [];\n  var keysToWatch = [];\n  strings.forEach(function (str) {\n    if (str.slice(0, 6) === 'select') {\n      keysToWatch.push(str);\n      return;\n    }\n\n    if (str.slice(0, 2) === 'do') {\n      actionCreators.push(str);\n      return;\n    }\n\n    throw Error(\"CanNotConnect \" + str);\n  });\n\n  var Connect = function (Component$$1) {\n    function Connect(props, context) {\n      var this$1 = this;\n      Component$$1.call(this, props, context);\n      var store = context.store;\n      this.state = store.select(keysToWatch);\n      this.unsubscribe = store.subscribeToSelectors(keysToWatch, this.setState.bind(this));\n      this.actionCreators = {};\n      actionCreators.forEach(function (name) {\n        this$1.actionCreators[name] = function () {\n          var args = [],\n              len = arguments.length;\n\n          while (len--) args[len] = arguments[len];\n\n          if (store.action) {\n            return store.action(name, args);\n          }\n\n          return store[name].apply(store, args);\n        };\n      });\n    }\n\n    if (Component$$1) Connect.__proto__ = Component$$1;\n    Connect.prototype = Object.create(Component$$1 && Component$$1.prototype);\n    Connect.prototype.constructor = Connect;\n\n    Connect.prototype.componentWillUnmount = function componentWillUnmount() {\n      this.unsubscribe();\n    };\n\n    Connect.prototype.render = function render() {\n      return createElement(Comp, Object.assign({}, this.props, this.state, this.actionCreators));\n    };\n\n    return Connect;\n  }(Component);\n\n  Connect.contextTypes = CONTEXT_TYPES;\n  Connect.displayName = 'connect(' + (Comp.displayName || Comp.name) + ')';\n  return Connect;\n};\n\nexport { Provider, connect };","map":{"version":3,"sources":["src/index.js"],"names":["const","CONTEXT_TYPES","store","Provider","Component","getChildContext","render","Children","connect","Comp","args","strings","actionCreators","keysToWatch","str","Error","Connect","constructor","context","name","componentWillUnmount","createElement","Object"],"mappings":";AAEAA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAA,YAAQ,CAAA;AADO,CAAtBF;;AAIA,IAAaG,QAAN,GAAA,UAAA,YAAA,EAAA;;;;;;;;;qBACLE,e,GAAAA,SAAAA,eAAAA,GAAkB;WACT;AAAEH,MAAAA,KAAK,EAAE,KAAA,KAAA,CAAWA;AAApB,K;;;qBAGTI,M,GAAAA,SAAAA,MAAAA,GAAS;WACAC,QAAQ,CAARA,IAAAA,CAAc,KAAA,KAAA,CAArB,QAAOA,C;;;;CANJ,CAAuBH,SAAvB,CAAP;;AAUAD,QAAQ,CAARA,iBAAAA,GAAAA,aAAAA;;AAEA,IAAaK,OAAO,GAAA,YAAA;;;;;;MACZC,IAAI,GAAGC,IAAI,CAAJA,KAAAA,CAAW,CAAXA,CAAAA,EAAb,CAAaA,C;MACPC,OAAO,GAAGD,IAAI,CAAJA,MAAAA,GAAAA,CAAAA,GAAkBA,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAc,CAAhCA,CAAkBA,CAAlBA,GAAhB,E;MACME,cAAc,GAApB,E;MACMC,WAAW,GAAjB,E;AACAF,EAAAA,OAAO,CAAPA,OAAAA,CAAAA,UAAgBG,GAAhBH,EAAgBG;QACVA,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,Q,EAAkC;AAChCD,MAAAA,WAAW,CAAXA,IAAAA,CAAAA,GAAAA;;;;QAGEC,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,I,EAA8B;AAC5BF,MAAAA,cAAc,CAAdA,IAAAA,CAAAA,GAAAA;;;;UAGIG,KAAK,CAAA,mBAAX,GAAW,C;AATbJ,GAAAA;;MAYMK,OAAN,GAAA,UAAA,YAAA,EAAA;AACEC,aAAAA,OAAAA,CAAW,KAAXA,EAAW,OAAXA,EAA4B;;8BAC1B,K,EAAA,O;UACMf,KAAK,GAAGgB,OAAO,CAArB,K;WACA,K,GAAahB,KAAK,CAALA,MAAAA,CAAb,WAAaA,C;WACb,W,GAAmBA,KAAK,CAALA,oBAAAA,CAAAA,WAAAA,EAEjB,KAAA,QAAA,CAAA,IAAA,CAFF,IAEE,CAFiBA,C;WAInB,c,GAAA,E;AACAU,MAAAA,cAAc,CAAdA,OAAAA,CAAAA,UAAuBO,IAAvBP,EAAuBO;eACrB,c,CAAA,I,IAAA,YAAA;;;;;;cACMjB,KAAK,CAAT,M,EAAkB;mBACTA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,EAAP,IAAOA,C;;;iBAEFA,KAAK,CAAA,IAAA,CAALA,CAAAA,KAAAA,CAAY,KAAZA,EAAP,IAAOA,C;AAJT,S;AADFU,OAAAA;;;;;;;sBAUFQ,oB,GAAAA,SAAAA,oBAAAA,GAAuB;WACrB,W;;;sBAGFd,M,GAAAA,SAAAA,MAAAA,GAAS;aACAe,aAAa,CAAA,IAAA,EAElBC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkB,KAAlBA,KAAAA,EAA8B,KAA9BA,KAAAA,EAA0C,KAF5C,cAEEA,CAFkB,C;;;;GAzBxB,CAAsBlB,SAAtB,C;;AA+BAY,EAAAA,OAAO,CAAPA,YAAAA,GAAAA,aAAAA;AACAA,EAAAA,OAAO,CAAPA,WAAAA,GAAsB,cAAcP,IAAI,CAAJA,WAAAA,IAAoBA,IAAI,CAAtC,IAAA,IAAtBO,GAAAA;SACA,O;AAlDK,CAAP","sourcesContent":["import { createElement, Component, Children } from 'react'\n\nconst CONTEXT_TYPES = {\n  store: () => {}\n}\n\nexport class Provider extends Component {\n  getChildContext() {\n    return { store: this.props.store }\n  }\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\n\nProvider.childContextTypes = CONTEXT_TYPES\n\nexport const connect = (...args) => {\n  const Comp = args.slice(-1)[0]\n  const strings = args.length > 1 ? args.slice(0, -1) : []\n  const actionCreators = []\n  const keysToWatch = []\n  strings.forEach(str => {\n    if (str.slice(0, 6) === 'select') {\n      keysToWatch.push(str)\n      return\n    }\n    if (str.slice(0, 2) === 'do') {\n      actionCreators.push(str)\n      return\n    }\n    throw Error(`CanNotConnect ${str}`)\n  })\n\n  class Connect extends Component {\n    constructor(props, context) {\n      super(props, context)\n      const store = context.store\n      this.state = store.select(keysToWatch)\n      this.unsubscribe = store.subscribeToSelectors(\n        keysToWatch,\n        this.setState.bind(this)\n      )\n      this.actionCreators = {}\n      actionCreators.forEach(name => {\n        this.actionCreators[name] = (...args) => {\n          if (store.action) {\n            return store.action(name, args)\n          }\n          return store[name](...args)\n        }\n      })\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe()\n    }\n\n    render() {\n      return createElement(\n        Comp,\n        Object.assign({}, this.props, this.state, this.actionCreators)\n      )\n    }\n  }\n  Connect.contextTypes = CONTEXT_TYPES\n  Connect.displayName = 'connect(' + (Comp.displayName || Comp.name) + ')'\n  return Connect\n}\n"]},"metadata":{},"sourceType":"module"}
var Store = function Store(dbName, storeName) {
    if ( dbName === void 0 ) dbName = 'keyval-store';
    if ( storeName === void 0 ) storeName = 'keyval';

    this.storeName = storeName;
    this._dbp = new Promise(function (resolve, reject) {
        var openreq = indexedDB.open(dbName, 1);
        openreq.onerror = (function () { return reject(openreq.error); });
        openreq.onsuccess = (function () { return resolve(openreq.result); });
        openreq.onupgradeneeded = (function () {
            openreq.result.createObjectStore(storeName);
        });
    });
};
Store.prototype._withIDBStore = function _withIDBStore (type, callback) {
        var this$1 = this;

    return this._dbp.then(function (db) { return new Promise(function (resolve, reject) {
        var transaction = db.transaction(this$1.storeName, type);
        transaction.oncomplete = (function () { return resolve(); });
        transaction.onabort = (transaction.onerror = (function () { return reject(transaction.error); }));
        callback(transaction.objectStore(this$1.storeName));
    }); });
};
var store;
function getDefaultStore() {
    if (!store) 
        { store = new Store(); }
    return store;
}

function get(key, store) {
    if ( store === void 0 ) store = getDefaultStore();

    var req;
    return store._withIDBStore('readonly', function (store) {
        req = store.get(key);
    }).then(function () { return req.result; });
}

function set(key, value, store) {
    if ( store === void 0 ) store = getDefaultStore();

    return store._withIDBStore('readwrite', function (store) {
        store.put(value, key);
    });
}

function del(key, store) {
    if ( store === void 0 ) store = getDefaultStore();

    return store._withIDBStore('readwrite', function (store) {
        store.delete(key);
    });
}

function clear(store) {
    if ( store === void 0 ) store = getDefaultStore();

    return store._withIDBStore('readwrite', function (store) {
        store.clear();
    });
}

function keys(store) {
    if ( store === void 0 ) store = getDefaultStore();

    var keys = [];
    return store._withIDBStore('readonly', function (store) {
        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {
            if (!this.result) 
                { return; }
            keys.push(this.result.key);
            this.result.continue();
        };
    }).then(function () { return keys; });
}

var idbKeyVal = ({
  Store: Store,
  get: get,
  set: set,
  del: del,
  clear: clear,
  keys: keys
});

var defaultOpts = {
    maxAge: Infinity,
    version: 0,
    lib: idbKeyVal
};
var getOpts = function (passedOptions) { return Object.assign({}, defaultOpts, passedOptions); };
var keyValLib = idbKeyVal;
var get$1 = function (key, opts, store) {
    var ref = getOpts(opts);
    var maxAge = ref.maxAge;
    var version = ref.version;
    var lib = ref.lib;
    return lib.get(key, store).then(JSON.parse).then(function (parsed) {
        var age = Date.now() - parsed.time;
        if (age > maxAge || version !== parsed.version) {
            lib.del(key, store);
            return null;
        }
        return parsed.data;
    }).catch(function () { return null; });
};
var set$1 = function (key, data, spec, store) {
    var ref = getOpts(spec);
    var lib = ref.lib;
    var version = ref.version;
    return lib.set(key, JSON.stringify({
        version: version,
        time: Date.now(),
        data: data
    }), store).catch(function () { return null; });
};
var getAll = function (spec, store) {
    var opts = getOpts(spec);
    var keys$$1;
    return opts.lib.keys(store).then(function (retrievedKeys) {
        keys$$1 = retrievedKeys;
        return Promise.all(keys$$1.map(function (key) { return get$1(key, opts, store); }));
    }).then(function (data) { return data.reduce(function (acc, bundleData, index) {
        if (bundleData) {
            acc[keys$$1[index]] = bundleData;
        }
        return acc;
    }, {}); }).catch(function () {});
};
var getConfiguredCache = function (spec) {
    var opts = getOpts(spec);
    var store;
    if (opts.name) {
        store = new Store(opts.name, opts.name);
    }
    return {
        get: function (key) { return get$1(key, opts, store); },
        set: function (key, val) { return set$1(key, val, opts, store); },
        getAll: function () { return getAll(opts, store); },
        del: function (key) { return opts.lib.del(key, store); },
        clear: function () { return opts.lib.clear(store); },
        keys: function () { return opts.lib.keys(store); }
    };
};

exports.keyValLib = keyValLib;
exports.get = get$1;
exports.set = set$1;
exports.getAll = getAll;
exports.getConfiguredCache = getConfiguredCache;

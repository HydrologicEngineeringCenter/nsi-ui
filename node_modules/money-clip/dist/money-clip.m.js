var Store = function Store(dbName, storeName) {
    if ( dbName === void 0 ) dbName = 'keyval-store';
    if ( storeName === void 0 ) storeName = 'keyval';

    this.storeName = storeName;
    this._dbp = new Promise(function (resolve, reject) {
        var openreq = indexedDB.open(dbName, 1);
        openreq.onerror = (function () { return reject(openreq.error); });
        openreq.onsuccess = (function () { return resolve(openreq.result); });
        openreq.onupgradeneeded = (function () {
            openreq.result.createObjectStore(storeName);
        });
    });
};
Store.prototype._withIDBStore = function _withIDBStore (type, callback) {
        var this$1 = this;

    return this._dbp.then(function (db) { return new Promise(function (resolve, reject) {
        var transaction = db.transaction(this$1.storeName, type);
        transaction.oncomplete = (function () { return resolve(); });
        transaction.onabort = (transaction.onerror = (function () { return reject(transaction.error); }));
        callback(transaction.objectStore(this$1.storeName));
    }); });
};
var store;
function getDefaultStore() {
    if (!store) 
        { store = new Store(); }
    return store;
}

function get(key, store) {
    if ( store === void 0 ) store = getDefaultStore();

    var req;
    return store._withIDBStore('readonly', function (store) {
        req = store.get(key);
    }).then(function () { return req.result; });
}

function set(key, value, store) {
    if ( store === void 0 ) store = getDefaultStore();

    return store._withIDBStore('readwrite', function (store) {
        store.put(value, key);
    });
}

function del(key, store) {
    if ( store === void 0 ) store = getDefaultStore();

    return store._withIDBStore('readwrite', function (store) {
        store.delete(key);
    });
}

function clear(store) {
    if ( store === void 0 ) store = getDefaultStore();

    return store._withIDBStore('readwrite', function (store) {
        store.clear();
    });
}

function keys(store) {
    if ( store === void 0 ) store = getDefaultStore();

    var keys = [];
    return store._withIDBStore('readonly', function (store) {
        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {
            if (!this.result) 
                { return; }
            keys.push(this.result.key);
            this.result.continue();
        };
    }).then(function () { return keys; });
}


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlkYi1rZXl2YWwuanMob3JpZ2luYWwpIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sTUFBTTtJQUNWLFlBQVksTUFBQSxHQUFTLGNBQWdCLEVBQUEsU0FBQSxHQUFZLFVBQVU7UUFDekQsSUFBQSxDQUFLLFNBQUwsQ0FBQSxDQUFBLENBQWlCO1FBQ2pCLElBQUEsQ0FBSyxJQUFMLENBQUEsQ0FBQSxDQUFZLElBQUksT0FBSixFQUFhLE9BQVMsRUFBQSxRQUFWLEdBQXFCO1lBQzNDLEtBQUEsQ0FBTSxVQUFVLFNBQUEsQ0FBVSxJQUFWLENBQWUsUUFBUTtZQUN2QyxPQUFBLENBQVEsT0FBUixDQUFBLENBQUEsS0FBa0IsR0FBTSxNQUFBLENBQU8sT0FBQSxDQUFRO1lBQ3ZDLE9BQUEsQ0FBUSxTQUFSLENBQUEsQ0FBQSxLQUFvQixHQUFNLE9BQUEsQ0FBUSxPQUFBLENBQVE7WUFFMUMsT0FBQSxDQUFRLGVBQVIsQ0FBQSxDQUFBLEtBQTBCLEdBQU07Z0JBQzlCLE9BQUEsQ0FBUSxNQUFSLENBQWUsaUJBQWYsQ0FBaUM7WUFDekM7UUFDQTtJQUNBO0lBQ0UsY0FBYyxJQUFNLEVBQUEsVUFBVTtRQUM1QixPQUFPLElBQUEsQ0FBSyxJQUFMLENBQVUsSUFBVixDQUNMLEVBQUEsSUFDRSxJQUFJLE9BQUosRUFBYSxPQUFTLEVBQUEsUUFBVixHQUFxQjtZQUMvQixLQUFBLENBQU0sY0FBYyxFQUFBLENBQUcsV0FBSCxDQUFlLElBQUEsQ0FBSyxXQUFXO1lBQ25ELFdBQUEsQ0FBWSxVQUFaLENBQUEsQ0FBQSxLQUF5QixHQUFNLE9BQUE7WUFDL0IsV0FBQSxDQUFZLE9BQVosQ0FBQSxDQUFBLEVBQXNCLFdBQUEsQ0FBWSxPQUFaLENBQUEsQ0FBQSxLQUFzQixHQUMxQyxNQUFBLENBQU8sV0FBQSxDQUFZO1lBQ3JCLFFBQUEsQ0FBUyxXQUFBLENBQVksV0FBWixDQUF3QixJQUFBLENBQUs7UUFDaEQ7SUFFQTtBQUNBO0FBQ0EsR0FBQSxDQUFJO0FBQ0osU0FBUyxrQkFBa0I7SUFDekIsSUFBSSxDQUFDO1FBQU8sS0FBQSxDQUFBLENBQUEsQ0FBUSxJQUFJLEtBQUo7SUFDcEIsT0FBTztBQUNUOztBQUNBLFNBQVMsSUFBSSxHQUFLLEVBQUEsS0FBQSxHQUFRLGVBQUEsSUFBbUI7SUFDM0MsR0FBQSxDQUFJO0lBQ0osT0FBTyxLQUFBLENBQ0osYUFESSxDQUNVLFlBQVksS0FBQSxJQUFTO1FBQ2xDLEdBQUEsQ0FBQSxDQUFBLENBQU0sS0FBQSxDQUFNLEdBQU4sQ0FBVTtJQUN0QixFQUhTLENBSUosSUFKSSxJQUlDLEdBQU0sR0FBQSxDQUFJO0FBQ3BCOztBQUNBLFNBQVMsSUFBSSxHQUFLLEVBQUEsS0FBTyxFQUFBLEtBQUEsR0FBUSxlQUFBLElBQW1CO0lBQ2xELE9BQU8sS0FBQSxDQUFNLGFBQU4sQ0FBb0IsYUFBYSxLQUFBLElBQVM7UUFDL0MsS0FBQSxDQUFNLEdBQU4sQ0FBVSxPQUFPO0lBQ3JCO0FBQ0E7O0FBQ0EsU0FBUyxJQUFJLEdBQUssRUFBQSxLQUFBLEdBQVEsZUFBQSxJQUFtQjtJQUMzQyxPQUFPLEtBQUEsQ0FBTSxhQUFOLENBQW9CLGFBQWEsS0FBQSxJQUFTO1FBQy9DLEtBQUEsQ0FBTSxNQUFOLENBQWE7SUFDakI7QUFDQTs7QUFDQSxTQUFTLE1BQU0sS0FBQSxHQUFRLGVBQUEsSUFBbUI7SUFDeEMsT0FBTyxLQUFBLENBQU0sYUFBTixDQUFvQixhQUFhLEtBQUEsSUFBUztRQUMvQyxLQUFBLENBQU0sS0FBTjtJQUNKO0FBQ0E7O0FBQ0EsU0FBUyxLQUFLLEtBQUEsR0FBUSxlQUFBLElBQW1CO0lBQ3ZDLEtBQUEsQ0FBTSxPQUFPO0lBQ2IsT0FBTyxLQUFBLENBQ0osYUFESSxDQUNVLFlBQVksS0FBQSxJQUFTO1FBR2xDO1NBQUUsS0FBQSxDQUFNLGFBQU4sQ0FBQSxFQUFBLENBQXVCLEtBQUEsQ0FBTSxXQUE5QixDQUEwQyxJQUExQyxDQUNDLE1BREQsQ0FFQyxTQUZELENBQUEsQ0FBQSxDQUVhLFlBQVc7WUFDdkIsSUFBSSxDQUFDLElBQUEsQ0FBSztnQkFBUTtZQUNsQixJQUFBLENBQUssSUFBTCxDQUFVLElBQUEsQ0FBSyxNQUFMLENBQVk7WUFDdEIsSUFBQSxDQUFLLE1BQUwsQ0FBWSxRQUFaO1FBQ1I7SUFDQSxFQVhTLENBWUosSUFaSSxJQVlDLEdBQU07QUFDaEI7O0FBRUEsT0FBQSxDQUFTLE9BQU8sS0FBSyxLQUFLLEtBQUssT0FBTztBQXpFdEMiLCJmaWxlIjoiaWRiLWtleXZhbC5qcyhvcmlnaW5hbCkiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb3BpZWQgYW5kIHBhc3RlZCBpbiB0byBtYWtlIHN1cmUgaXQgYmVjb21lcyBhIGxvY2FsIHJlcXVpcmVcbi8vIGFuZCBnZXRzIGNvbXBpbGVkIHRvIGVzNSBieSBtaWNyb2J1bmRsZS9idWJsZSB0b29cbmNsYXNzIFN0b3JlIHtcbiAgY29uc3RydWN0b3IoZGJOYW1lID0gJ2tleXZhbC1zdG9yZScsIHN0b3JlTmFtZSA9ICdrZXl2YWwnKSB7XG4gICAgdGhpcy5zdG9yZU5hbWUgPSBzdG9yZU5hbWVcbiAgICB0aGlzLl9kYnAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBvcGVucmVxID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCAxKVxuICAgICAgb3BlbnJlcS5vbmVycm9yID0gKCkgPT4gcmVqZWN0KG9wZW5yZXEuZXJyb3IpXG4gICAgICBvcGVucmVxLm9uc3VjY2VzcyA9ICgpID0+IHJlc29sdmUob3BlbnJlcS5yZXN1bHQpXG4gICAgICAvLyBGaXJzdCB0aW1lIHNldHVwOiBjcmVhdGUgYW4gZW1wdHkgb2JqZWN0IHN0b3JlXG4gICAgICBvcGVucmVxLm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHtcbiAgICAgICAgb3BlbnJlcS5yZXN1bHQuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgX3dpdGhJREJTdG9yZSh0eXBlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9kYnAudGhlbihcbiAgICAgIGRiID0+XG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKHRoaXMuc3RvcmVOYW1lLCB0eXBlKVxuICAgICAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoKSA9PiByZXNvbHZlKClcbiAgICAgICAgICB0cmFuc2FjdGlvbi5vbmFib3J0ID0gdHJhbnNhY3Rpb24ub25lcnJvciA9ICgpID0+XG4gICAgICAgICAgICByZWplY3QodHJhbnNhY3Rpb24uZXJyb3IpXG4gICAgICAgICAgY2FsbGJhY2sodHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUodGhpcy5zdG9yZU5hbWUpKVxuICAgICAgICB9KVxuICAgIClcbiAgfVxufVxubGV0IHN0b3JlXG5mdW5jdGlvbiBnZXREZWZhdWx0U3RvcmUoKSB7XG4gIGlmICghc3RvcmUpIHN0b3JlID0gbmV3IFN0b3JlKClcbiAgcmV0dXJuIHN0b3JlXG59XG5mdW5jdGlvbiBnZXQoa2V5LCBzdG9yZSA9IGdldERlZmF1bHRTdG9yZSgpKSB7XG4gIGxldCByZXFcbiAgcmV0dXJuIHN0b3JlXG4gICAgLl93aXRoSURCU3RvcmUoJ3JlYWRvbmx5Jywgc3RvcmUgPT4ge1xuICAgICAgcmVxID0gc3RvcmUuZ2V0KGtleSlcbiAgICB9KVxuICAgIC50aGVuKCgpID0+IHJlcS5yZXN1bHQpXG59XG5mdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSwgc3RvcmUgPSBnZXREZWZhdWx0U3RvcmUoKSkge1xuICByZXR1cm4gc3RvcmUuX3dpdGhJREJTdG9yZSgncmVhZHdyaXRlJywgc3RvcmUgPT4ge1xuICAgIHN0b3JlLnB1dCh2YWx1ZSwga2V5KVxuICB9KVxufVxuZnVuY3Rpb24gZGVsKGtleSwgc3RvcmUgPSBnZXREZWZhdWx0U3RvcmUoKSkge1xuICByZXR1cm4gc3RvcmUuX3dpdGhJREJTdG9yZSgncmVhZHdyaXRlJywgc3RvcmUgPT4ge1xuICAgIHN0b3JlLmRlbGV0ZShrZXkpXG4gIH0pXG59XG5mdW5jdGlvbiBjbGVhcihzdG9yZSA9IGdldERlZmF1bHRTdG9yZSgpKSB7XG4gIHJldHVybiBzdG9yZS5fd2l0aElEQlN0b3JlKCdyZWFkd3JpdGUnLCBzdG9yZSA9PiB7XG4gICAgc3RvcmUuY2xlYXIoKVxuICB9KVxufVxuZnVuY3Rpb24ga2V5cyhzdG9yZSA9IGdldERlZmF1bHRTdG9yZSgpKSB7XG4gIGNvbnN0IGtleXMgPSBbXVxuICByZXR1cm4gc3RvcmVcbiAgICAuX3dpdGhJREJTdG9yZSgncmVhZG9ubHknLCBzdG9yZSA9PiB7XG4gICAgICAvLyBUaGlzIHdvdWxkIGJlIHN0b3JlLmdldEFsbEtleXMoKSwgYnV0IGl0IGlzbid0IHN1cHBvcnRlZCBieSBFZGdlIG9yIFNhZmFyaS5cbiAgICAgIC8vIEFuZCBvcGVuS2V5Q3Vyc29yIGlzbid0IHN1cHBvcnRlZCBieSBTYWZhcmkuXG4gICAgICA7KHN0b3JlLm9wZW5LZXlDdXJzb3IgfHwgc3RvcmUub3BlbkN1cnNvcikuY2FsbChcbiAgICAgICAgc3RvcmVcbiAgICAgICkub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5yZXN1bHQpIHJldHVyblxuICAgICAgICBrZXlzLnB1c2godGhpcy5yZXN1bHQua2V5KVxuICAgICAgICB0aGlzLnJlc3VsdC5jb250aW51ZSgpXG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiBrZXlzKVxufVxuXG5leHBvcnQgeyBTdG9yZSwgZ2V0LCBzZXQsIGRlbCwgY2xlYXIsIGtleXMgfVxuIl19

var idbKeyVal = ({
  Store: Store,
  get: get,
  set: set,
  del: del,
  clear: clear,
  keys: keys
});

var defaultOpts = {
    maxAge: Infinity,
    version: 0,
    lib: idbKeyVal
};
var getOpts = function (passedOptions) { return Object.assign({}, defaultOpts, passedOptions); };
var keyValLib = idbKeyVal;
var get$1 = function (key, opts, store) {
    var ref = getOpts(opts);
    var maxAge = ref.maxAge;
    var version = ref.version;
    var lib = ref.lib;
    return lib.get(key, store).then(JSON.parse).then(function (parsed) {
        var age = Date.now() - parsed.time;
        if (age > maxAge || version !== parsed.version) {
            lib.del(key, store);
            return null;
        }
        return parsed.data;
    }).catch(function () { return null; });
};
var set$1 = function (key, data, spec, store) {
    var ref = getOpts(spec);
    var lib = ref.lib;
    var version = ref.version;
    return lib.set(key, JSON.stringify({
        version: version,
        time: Date.now(),
        data: data
    }), store).catch(function () { return null; });
};
var getAll = function (spec, store) {
    var opts = getOpts(spec);
    var keys$$1;
    return opts.lib.keys(store).then(function (retrievedKeys) {
        keys$$1 = retrievedKeys;
        return Promise.all(keys$$1.map(function (key) { return get$1(key, opts, store); }));
    }).then(function (data) { return data.reduce(function (acc, bundleData, index) {
        if (bundleData) {
            acc[keys$$1[index]] = bundleData;
        }
        return acc;
    }, {}); }).catch(function () {});
};
var getConfiguredCache = function (spec) {
    var opts = getOpts(spec);
    var store;
    if (opts.name) {
        store = new Store(opts.name, opts.name);
    }
    return {
        get: function (key) { return get$1(key, opts, store); },
        set: function (key, val) { return set$1(key, val, opts, store); },
        getAll: function () { return getAll(opts, store); },
        del: function (key) { return opts.lib.del(key, store); },
        clear: function () { return opts.lib.clear(store); },
        keys: function () { return opts.lib.keys(store); }
    };
};


//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TCxLQUFLLEdBQUEsSUFBTyxJQUFBLENBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxLQUFLLE1BSnpCLENBQUE7UUFLTCxVQUFPLEdBQU0sSUFBQSxDQUFLLEdBQUwsQ0FBUyxLQUFULENBQWUsTUFMdkIsQ0FBQTtRQU1MLFNBQU0sR0FBTSxJQUFBLENBQUssR0FBTCxDQUFTLElBQVQsQ0FBYzs7QUFFOUI7QUF4RUEiLCJmaWxlIjoiaW5kZXguanMob3JpZ2luYWwpIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaWRiS2V5VmFsIGZyb20gJy4vaWRiLWtleXZhbCdcblxuY29uc3QgZGVmYXVsdE9wdHMgPSB7IG1heEFnZTogSW5maW5pdHksIHZlcnNpb246IDAsIGxpYjogaWRiS2V5VmFsIH1cbmNvbnN0IGdldE9wdHMgPSBwYXNzZWRPcHRpb25zID0+IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRzLCBwYXNzZWRPcHRpb25zKVxuXG5leHBvcnQgY29uc3Qga2V5VmFsTGliID0gaWRiS2V5VmFsXG5cbmV4cG9ydCBjb25zdCBnZXQgPSAoa2V5LCBvcHRzLCBzdG9yZSkgPT4ge1xuICBjb25zdCB7IG1heEFnZSwgdmVyc2lvbiwgbGliIH0gPSBnZXRPcHRzKG9wdHMpXG4gIHJldHVybiBsaWJcbiAgICAuZ2V0KGtleSwgc3RvcmUpXG4gICAgLnRoZW4oSlNPTi5wYXJzZSlcbiAgICAudGhlbihwYXJzZWQgPT4ge1xuICAgICAgY29uc3QgYWdlID0gRGF0ZS5ub3coKSAtIHBhcnNlZC50aW1lXG4gICAgICBpZiAoYWdlID4gbWF4QWdlIHx8IHZlcnNpb24gIT09IHBhcnNlZC52ZXJzaW9uKSB7XG4gICAgICAgIGxpYi5kZWwoa2V5LCBzdG9yZSlcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZWQuZGF0YVxuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IG51bGwpXG59XG5cbmV4cG9ydCBjb25zdCBzZXQgPSAoa2V5LCBkYXRhLCBzcGVjLCBzdG9yZSkgPT4ge1xuICBjb25zdCB7IGxpYiwgdmVyc2lvbiB9ID0gZ2V0T3B0cyhzcGVjKVxuICByZXR1cm4gbGliXG4gICAgLnNldChcbiAgICAgIGtleSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgZGF0YVxuICAgICAgfSksXG4gICAgICBzdG9yZVxuICAgIClcbiAgICAuY2F0Y2goKCkgPT4gbnVsbClcbn1cblxuZXhwb3J0IGNvbnN0IGdldEFsbCA9IChzcGVjLCBzdG9yZSkgPT4ge1xuICBjb25zdCBvcHRzID0gZ2V0T3B0cyhzcGVjKVxuICBsZXQga2V5c1xuICByZXR1cm4gb3B0cy5saWJcbiAgICAua2V5cyhzdG9yZSlcbiAgICAudGhlbihyZXRyaWV2ZWRLZXlzID0+IHtcbiAgICAgIGtleXMgPSByZXRyaWV2ZWRLZXlzXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoa2V5cy5tYXAoa2V5ID0+IGdldChrZXksIG9wdHMsIHN0b3JlKSkpXG4gICAgfSlcbiAgICAudGhlbihkYXRhID0+XG4gICAgICBkYXRhLnJlZHVjZSgoYWNjLCBidW5kbGVEYXRhLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoYnVuZGxlRGF0YSkge1xuICAgICAgICAgIGFjY1trZXlzW2luZGV4XV0gPSBidW5kbGVEYXRhXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwge30pXG4gICAgKVxuICAgIC5jYXRjaCgoKSA9PiB7fSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ3VyZWRDYWNoZSA9IHNwZWMgPT4ge1xuICBjb25zdCBvcHRzID0gZ2V0T3B0cyhzcGVjKVxuICBsZXQgc3RvcmVcbiAgaWYgKG9wdHMubmFtZSkge1xuICAgIHN0b3JlID0gbmV3IGlkYktleVZhbC5TdG9yZShvcHRzLm5hbWUsIG9wdHMubmFtZSlcbiAgfVxuICByZXR1cm4ge1xuICAgIGdldDoga2V5ID0+IGdldChrZXksIG9wdHMsIHN0b3JlKSxcbiAgICBzZXQ6IChrZXksIHZhbCkgPT4gc2V0KGtleSwgdmFsLCBvcHRzLCBzdG9yZSksXG4gICAgZ2V0QWxsOiAoKSA9PiBnZXRBbGwob3B0cywgc3RvcmUpLFxuICAgIGRlbDoga2V5ID0+IG9wdHMubGliLmRlbChrZXksIHN0b3JlKSxcbiAgICBjbGVhcjogKCkgPT4gb3B0cy5saWIuY2xlYXIoc3RvcmUpLFxuICAgIGtleXM6ICgpID0+IG9wdHMubGliLmtleXMoc3RvcmUpXG4gIH1cbn1cbiJdfQ==

export { keyValLib, get$1 as get, set$1 as set, getAll, getConfiguredCache };
